[{"id":"264c0c13.69f254","type":"tab","label":"PoS Emulation","disabled":false,"info":""},{"id":"c536364a.7dc428","type":"tab","label":"Vision","disabled":false,"info":""},{"id":"97174c01.d6ed8","type":"tab","label":"Buffer","disabled":false,"info":""},{"id":"dd818a98.600e","type":"meraki-dashboard-api-service","z":"","host":"https://api.meraki.com/api/v0","secureApiKeyHeaderOrQueryName":"X-Cisco-Meraki-API-Key","name":"COI Meraki Network"},{"id":"c1134d0c.920148","type":"aws-config","z":""},{"id":"17afbc88.680ea3","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"dfc4992b.bd04e","type":"meraki-dashboard-api-service","z":"","host":"https://api.meraki.com/api/v0","secureApiKeyHeaderOrQueryName":"X-Cisco-Meraki-API-Key","name":""},{"id":"841d6c5c.775fb","type":"meraki-dashboard-api-service","z":"","host":"https://api.meraki.com/api/v0","secureApiKeyHeaderOrQueryName":"X-Cisco-Meraki-API-Key","name":"Maralves-Home"},{"id":"16c71b67.1d6215","type":"Webex Teams Authentication","z":"","name":"infobot"},{"id":"36ece312.edc00c","type":"aws-config","z":""},{"id":"ce3abda2.e8213","type":"amazon config","z":"","name":"AWS","region":"us-east-1","proxyRequired":false,"proxy":""},{"id":"de899757.e189e","type":"mqtt-broker","z":"","name":"Mosca-Snap","broker":"ec2-3-82-217-120.compute-1.amazonaws.com","port":"1889","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"6fb767e4.22444","type":"mqtt-broker","z":"","name":"Mosca-Snap","broker":"localhost","port":"1882","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"f5d27cf7.bd4e6","type":"comment","z":"264c0c13.69f254","name":"Msg to Checkout-Compliance","info":"","x":160,"y":260,"wires":[]},{"id":"2415cc4.58387b4","type":"Webex Teams API","z":"264c0c13.69f254","profileConfig":"16c71b67.1d6215","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"messages","method":"createMessage","name":"Send MSG to Webex Room","x":880,"y":320,"wires":[[]]},{"id":"a6414415.8ac528","type":"inject","z":"264c0c13.69f254","name":"Sample MSG test to webex teams","topic":"","payload":"{\"body\":{\"roomId\":\"Y2lzY29zcGFyazovL3VzL1JPT00vYzA5ZGVjYzAtMzNkNC0xMWVhLWEzNGItMmZkZDdkOTNkZWE3\",\"text\":\"Msg para sala by Infobot\"}}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":480,"y":260,"wires":[["2415cc4.58387b4"]]},{"id":"48a1fb8b.fd4624","type":"Webex Teams API","z":"264c0c13.69f254","profileConfig":"16c71b67.1d6215","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"rooms","method":"getRooms","name":"List rooms where bot belongs to","x":450,"y":100,"wires":[["7581ae91.2992c8"]]},{"id":"7581ae91.2992c8","type":"Webex Teams Payload Parser","z":"264c0c13.69f254","name":"filters roomId and Title","parsers":[{"key":"id","as":""},{"key":"title","as":""}],"x":740,"y":100,"wires":[["72d39437.10db84"]]},{"id":"72d39437.10db84","type":"debug","z":"264c0c13.69f254","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":970,"y":100,"wires":[]},{"id":"33b27c84.e773c4","type":"comment","z":"264c0c13.69f254","name":"THIS FLOW IS TO TEST YOUR BOT","info":"","x":190,"y":60,"wires":[]},{"id":"dce21dbf.a1a9d8","type":"comment","z":"264c0c13.69f254","name":"1) Get Webhook msg","info":"","x":140,"y":580,"wires":[]},{"id":"2d451a21.dd373e","type":"Webex Teams Payload Parser","z":"264c0c13.69f254","name":"Filters MSG Id","parsers":[{"key":"id","as":"messageId"}],"x":300,"y":640,"wires":[["de5c8098.56ba9"]]},{"id":"de5c8098.56ba9","type":"Webex Teams API","z":"264c0c13.69f254","profileConfig":"16c71b67.1d6215","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"messages","method":"getMessage","name":"get msg Id","x":150,"y":740,"wires":[["5ac652a.7a71f2c"]]},{"id":"a2186fee.423a68","type":"Webex Teams Payload Parser","z":"264c0c13.69f254","name":"Filters text","parsers":[{"key":"text","as":""},{"key":"personId","as":""}],"x":570,"y":960,"wires":[["ef9b7058.a9757"]]},{"id":"793ced1f.859724","type":"Webex Teams Payload Parser","z":"264c0c13.69f254","name":"Filters personId","parsers":[{"key":"personId","as":""},{"key":"name","as":""}],"x":180,"y":860,"wires":[["cf5c2613.ed7938"]]},{"id":"cf5c2613.ed7938","type":"Webex Teams API","z":"264c0c13.69f254","profileConfig":"16c71b67.1d6215","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"people","method":"getPerson","name":"Person Id data","x":420,"y":1040,"wires":[["e6005bde.6459a8"]]},{"id":"e6005bde.6459a8","type":"Webex Teams Payload Parser","z":"264c0c13.69f254","name":"Filters Display Name","parsers":[{"key":"displayName","as":""}],"x":720,"y":1040,"wires":[["ef9b7058.a9757"]]},{"id":"1d2c81cf.1fdb56","type":"debug","z":"264c0c13.69f254","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload.body.text","targetType":"msg","x":1260,"y":800,"wires":[]},{"id":"5ac652a.7a71f2c","type":"switch","z":"264c0c13.69f254","name":"filtering","property":"payload.personEmail","propertyType":"msg","rules":[{"t":"neq","v":"infobot@sparkbot.io","vt":"str"}],"checkall":"false","repair":false,"outputs":1,"x":400,"y":740,"wires":[["a2186fee.423a68","793ced1f.859724"]]},{"id":"ef9b7058.a9757","type":"join","z":"264c0c13.69f254","name":"join","mode":"custom","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":910,"y":960,"wires":[["52c4c0d9.9d86f","45aec739.c4f1a"]]},{"id":"52c4c0d9.9d86f","type":"debug","z":"264c0c13.69f254","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1150,"y":960,"wires":[]},{"id":"94f464e7.77dea","type":"comment","z":"264c0c13.69f254","name":"2) Move on if msg is not from bot itself","info":"","x":470,"y":700,"wires":[]},{"id":"b3569407.2ad588","type":"comment","z":"264c0c13.69f254","name":"2A) Who wrote?","info":"","x":180,"y":800,"wires":[]},{"id":"a94287eb.a9fa58","type":"comment","z":"264c0c13.69f254","name":"2B) What is written?","info":"","x":610,"y":900,"wires":[]},{"id":"e337c057.b3b05","type":"comment","z":"264c0c13.69f254","name":"3) Join who + what","info":"","x":870,"y":900,"wires":[]},{"id":"45aec739.c4f1a","type":"change","z":"264c0c13.69f254","name":"recreate JSON msg","rules":[{"t":"set","p":"payload.body.roomId","pt":"msg","to":"","tot":"str"},{"t":"move","p":"payload.text","pt":"msg","to":"payload.body.text","tot":"msg"},{"t":"delete","p":"payload.personId","pt":"msg"},{"t":"move","p":"payload.displayName","pt":"msg","to":"payload.body.displayName","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":800,"wires":[["1d2c81cf.1fdb56","73eb851.9f5917c"]]},{"id":"88c841f8.d20188","type":"comment","z":"264c0c13.69f254","name":"5) Command interpretation","info":"","x":770,"y":600,"wires":[]},{"id":"73eb851.9f5917c","type":"python-function","z":"264c0c13.69f254","name":"Understand user's command","func":"import json\n\n\n# get payload\ntry:\n    texto = msg['payload']['body']['text']\nexcept:\n    pass    \n\n# default msg\ndefault=\"I didn't get your command. Use:\\n\"\ndefault=default+\"Checkout <ID> - start checkout and generate image.\\n\"\ndefault=default+\"Fraud <ID> - inform fraud transaction ID.\\n\"\n\n# lower input for easyness of comparison\ntexto=texto.lower()\n\n#split to parameters\nparams=texto.split(\" \")\nb=0\n\nif len(params) > 1:\n    \n    # check to see checkout word in command\n    if \"checkout\" in texto:\n        while b<len(params):\n            if params[b]=='checkout':\n                transacao=params[b+1]\n                msg['payload']=transacao\n                msg['topic']=transacao\n\n            b=b+1\n        \n        #return output to checkout function\n        return msg\n        \n    # check to see fraud word in command\n    elif \"fraud\" in texto:\n        while b<len(params):\n            if params[b]=='fraud':\n                transacao=params[b+1]\n                msg['payload']=transacao\n                msg['topic']=transacao\n            \n            b=b+1\n    \n        #outputs fraud to fraud function\n        return [None, msg]\n    \n    # if no match, default message    \n    else:\n        msg['payload']=default\n        return [None,None,msg]\n\nelse:\n    # if no match, default message\n    msg['payload']=default\n    return [None,None,msg]\n\n        \nreturn","outputs":3,"x":780,"y":660,"wires":[["b9a2bd79.eece28"],["ad03db43.01bd9"],["ca6faad8.5719c"]]},{"id":"8e2673b1.46bbe8","type":"debug","z":"264c0c13.69f254","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1350,"y":540,"wires":[]},{"id":"3e1a97ed.633d5","type":"Webex Teams Webhook","z":"264c0c13.69f254","profileConfig":"16c71b67.1d6215","resource":"messages","event":"created","host":"http://ec2-3-82-217-120.compute-1.amazonaws.com:1880","name":"GET Webhook","x":100,"y":640,"wires":[["2d451a21.dd373e"]]},{"id":"348ccb4a.04e864","type":"inject","z":"c536364a.7dc428","name":"Test: Msg from 3rd Party","topic":"3030","payload":"\"2020-01-16T14:50:00-03:00\"","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":370,"y":300,"wires":[["e79b1e40.c09f2"]]},{"id":"3ea4a172.76b7a6","type":"debug","z":"c536364a.7dc428","name":"Debug: Snapshot file name","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1040,"y":160,"wires":[]},{"id":"e79b1e40.c09f2","type":"python-function","z":"c536364a.7dc428","name":"SecretSauce","func":"import requests\nimport json\nimport time\nimport sys\nimport warnings\nimport boto3\n\n# This is for ignoring some warnings in python\nwarnings.filterwarnings(\"ignore\")\n\n# This is Meraki API-KEY\nHEADERS = {\n        'X-Cisco-Meraki-API-Key': \"223ee0a24e7205a1b5e0c9fd6d86186fd82fa7d7\",\n        }\n\n# These global var are for meraki's network id and camenera serial number.\n# Network ID can be found via POSTMAN\nNETWORK_ID = \"N_711568741124565076\"\nCAMERA_SN = \"Q2EV-GW3A-9J8Z\"\n\n# This is the AWS S3 account.\n# It has its access enconded to the code as we did not want to use the AWS app\n# which requires an app installation. The app installation is more secure as\n# it is token based and here we are using a hard-coded method.\ns3 = boto3.resource('s3', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ',\n    aws_secret_access_key='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')\n\n#########################\n# Look for the snapshot #\n#########################\n\n# This is the function for getting snapshots\n# It is possible that URL might be empty (no recording) so the consistence must\n# be treated in the main code.\ndef get_snap(headers, start):\n    camera_url = \"https://api.meraki.com/api/v0/networks/\" + NETWORK_ID + \"/cameras/\" + CAMERA_SN + \"/snapshot\"\n\n    payload = {\n\t#    \"timestamp\": start\n    }\n\n    response = requests.request(\"POST\", camera_url, data=payload, headers=headers)\n\n    getJson = json.loads(str(response.text))\n\n    if 'errors' in getJson:\n        error_event(2)\n        return 0\n    else:    \n        print(getJson)\n        url = getJson['url']\n\n        #print(\" \")\n        #print(\"This is the URL for the image: \")\n        #print(url)\n\n        time.sleep(5)\n        return url\n\n\n###################################\n# Gets the image and downloads it #\n###################################\n\n# This function receives 3 arguments and downloads the snapshot locally\n# There is a sleep time to make sure that the file has been downloaded \n# successifully.\ndef dl_jpg(url, file_path, file_name):\n    full_path = file_path + file_name\n    print(\" \")\n    print(full_path)\n    \n    with open(full_path, 'wb') as f:\n        resp = requests.get(url, verify=False, allow_redirects=True)\n        f.write(resp.content)\n    time.sleep(10)\n    f.close()\n    return 0\n    \n######################################\n# Gets the image and sends it to AWS #\n######################################\n\n# The JPG image is sent to AWS storage using the S3 Global Var info.\ndef aws_jpg(file_path, file_name):\n    full_path = file_path + file_name\n    data = open(full_path, 'rb')\n    s3.Bucket('asics3').put_object(Key=file_name, Body=data)\n    return 0\n\n#####################\n#       TIME        #\n#####################\n\n# Meraki uses an ISO version of timestamp. This must be treated before sending.\n# In here we do all the adjustmemnts required for this to work.\ndef time_update(start, x):\n    seconds = start.split(\":\")[2]\n    #fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str((int(seconds.split(\".\")[0])) + x) + \".\" + \"000Z\")\n    fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str(int(seconds.split(\"-\")[0]) + x) + \"-\" + str(seconds.split(\"-\")[1]))\n    return fim\n\n#####################\n#       ERRORS      #\n#####################\n\n# Errors are still a work in progress...\ndef error_event(i):\n    switcher={\n        1:'Error #1: Bad TimeStamp',\n        2:'Error #2'\n    }\n    print (switcher.get(i,\"Invalid Error\"))\n    return 0\n\n#####################\n#       MAIN        #\n#####################\n\nif __name__ == '__main__':\n    start = msg['payload']\n    transaction_id= msg['topic']\n    # Uncomment the line below if you are running outside node-red env.\n    # This is the format expected by Meraki's Dashboard:\n    #start = \"2019-12-16T11:50:00-03:00\"\n    #new_start = str(time_update(start,0))\n    \n    # This is still under testing, however we found that 2 snapshots might be \n    # enough for intial testing and comparison. This is not written in stone \n    # and it can be changed/adapted\n    for x in range (0,1):\n        new_start = time_update(start,x)\n        url = get_snap(HEADERS, new_start)\n        # Only not empty URLs:\n        if(url):\n            file_name = (transaction_id + \"_snapshot_\" + new_start + \"UTC.jpg\")\n            dl_jpg(url, '/home/ubuntu/images/', file_name)\n            aws_jpg('/home/ubuntu/images/', file_name)\n            # Portuguese (BR) Message Version:\n            #msg['payload'] = \"Checkout \" + transaction_id + \" realizado com sucesso\" + \"@\" + url\n            # English (US) Message Version:\n            msg['payload'] = \"Checkout \" + transaction_id + \" successfully recorded!\" + \"@\" + url\n            msg['topic'] = file_name\n        else:\n            print (\"Bye...\")\n            print transaction_id\n            msg['payload'] = \"ERROR: URL is empty. \\n Please check if the recording is available or if the camera \" + CAMERA_SN + \" is online\"\nreturn msg","outputs":1,"x":710,"y":220,"wires":[["3ea4a172.76b7a6","eb337994.50f1d8","6ae0cc9.1ec8934","1cf06eb6.6ef6d1"]]},{"id":"61584b08.8e98b4","type":"inject","z":"c536364a.7dc428","name":"","topic":"","payload":"\"2424\"","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":210,"y":560,"wires":[["b34de211.9efb38"]]},{"id":"971b6107.c35a9","type":"debug","z":"c536364a.7dc428","name":"Debug: Fraud msg output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":670,"y":440,"wires":[]},{"id":"b34de211.9efb38","type":"python-function","z":"c536364a.7dc428","name":"FraudFlag","func":"\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n# This is the AWS S3 account.\n# It has its access enconded to the code as we did not want to use the AWS app\n# which requires an app installation. The app installation is more secure as\n# it is token based and here we are using a had-coded method.\ns3_resource = boto3.resource('s3', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\ns3_client = boto3.client('s3', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n\n# Function for copying objects inside AWS S3\ndef copy_object(src_bucket_name, src_object_name,\n                dest_bucket_name, dest_object_name=None):\n\n    # Construct source bucket/object parameter\n    copy_source = {'Bucket': src_bucket_name, 'Key': src_object_name}\n    if dest_object_name is None:\n        dest_object_name = src_object_name\n\n    # Copy the object\n    #try:\n    s3_client.copy_object(CopySource=copy_source, Bucket=dest_bucket_name, Key=dest_object_name)\n    #except ClientError as e:\n    #    logging.error(e)\n    #    return False\n    #return True\n\n\ndef main():\n    # All S3 buckets are defined in here:\n    transaction_id = msg['payload']\n    my_bucket_fraud_str = 'fraudasic'\n    my_bucket_str = 'asics3'\n    my_bucket = s3_resource.Bucket(my_bucket_str)\n    my_bucket_fraud = s3_resource.Bucket(my_bucket_fraud_str)\n\n    frauds_list = []\n    \n    # All images are initially stored with transaction ID and its timestamp\n    # When a transaction is flaged, this script will look for the image that\n    # contains the corresponding transaction ID in its file name and it will\n    # copy from the trasaction bucket to the fraud bucket:\n    for images in my_bucket.objects.all():\n        if transaction_id+\"_snapshot_\" in images.key:\n            frauds_list.append(images.key)\n            print(images.key)\n            new_name = images.key\n\n    # Assign these values before running the program\n            src_bucket_name = my_bucket_str\n            src_object_name = new_name\n            dest_bucket_name = my_bucket_fraud_str\n            dest_object_name = new_name\n\n    # Set up logging\n            #logging.basicConfig(level=logging.DEBUG,\n            #            format='%(levelname)s: %(asctime)s: %(message)s')\n\n    # Copy the object\n            success = copy_object(src_bucket_name, src_object_name,\n                         dest_bucket_name, dest_object_name)\n            #if success:\n            #    logging.info(f'Copied {src_bucket_name}/{src_object_name} to '\n            #                 f'{dest_bucket_name}/{dest_object_name}')\n            #print (images.key + \"------Added to Fraud Bucket\")\n            all = str(images.key)\n            days = all.split(\"_\")[2]\n            day = days.split(\"T\")[0]\n            #Portuguese (BR) Message Version:\n            #msg['payload'] = \"Transação do dia \" + day + \" foi marcada como fraude\"\n            #English (US) Message Version:\n            msg['payload'] = \"Transaction \" + transaction_id + \" has been flagged as fraud successfully!\"\n\nif __name__ == '__main__':\n    main()\n    return msg\n","outputs":1,"x":400,"y":480,"wires":[["971b6107.c35a9","fd0cd819.9374a8"]]},{"id":"55ca0d8f.14328c","type":"mqtt in","z":"c536364a.7dc428","name":"lab_entrance_(raw_detections)","topic":"/merakimv/Q2EV-GW3A-9J8Z/raw_detections","qos":"0","datatype":"auto","broker":"de899757.e189e","x":240,"y":760,"wires":[["9b0f65e1.4f3628","72dd888d.d9b5e8"]]},{"id":"9b0f65e1.4f3628","type":"json","z":"c536364a.7dc428","name":"","property":"payload","action":"","pretty":true,"x":530,"y":760,"wires":[["c9f90161.f931d8","7a9668fa.3162a"]]},{"id":"c9f90161.f931d8","type":"debug","z":"c536364a.7dc428","name":"Debug: JSON Convertion","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":750,"y":760,"wires":[]},{"id":"f2e07dff.36ca1","type":"rbe","z":"c536364a.7dc428","name":"OID Check","func":"rbei","gap":"","start":"","inout":"out","property":"payload.objects[0].oid","x":670,"y":940,"wires":[["100469ce.266656","1c32b2fd.dda5d5"]]},{"id":"7a9668fa.3162a","type":"switch","z":"c536364a.7dc428","name":"Person Type Check","property":"payload.objects[0].type","propertyType":"msg","rules":[{"t":"cont","v":"person","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":610,"y":860,"wires":[["f2e07dff.36ca1","3622d20b.32552e"]]},{"id":"3622d20b.32552e","type":"debug","z":"c536364a.7dc428","name":"Debug: Person detection","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":890,"y":860,"wires":[]},{"id":"100469ce.266656","type":"debug","z":"c536364a.7dc428","name":"Debug: Duplicated Person ID ","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload.ts","targetType":"msg","x":940,"y":940,"wires":[]},{"id":"b0f04358.0e8b78","type":"mosca in","z":"c536364a.7dc428","mqtt_port":"1889","mqtt_ws_port":"8089","name":"","username":"","password":"","dburl":"","x":150,"y":660,"wires":[["cd0bebad.f9925"]]},{"id":"cd0bebad.f9925","type":"debug","z":"c536364a.7dc428","name":"Debug: Mosca MQTT Broker","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":430,"y":660,"wires":[]},{"id":"b8edfb9d.7f857","type":"python-function","z":"c536364a.7dc428","name":"Analytics","func":"import requests\nimport json\nimport time\nimport sys\nimport warnings\nimport boto3\nimport datetime\nimport os\n\n# This is the AWS S3 account.\n# It has its access enconded to the code as we did not want to use the AWS app\n# which requires an app installation. The app installation is more secure as\n# it is token based and here we are using a hard-coded method.\ns3_resource = boto3.resource('s3', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\ns3_client = boto3.client('s3', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n\nmy_bucket_fraud_str = 'fraudasic'\nmy_bucket_str = 'asics3'\n\nwarnings.filterwarnings(\"ignore\")\n\n# This is Meraki API-KEY\nHEADERS = {\n        'X-Cisco-Meraki-API-Key': \"223ee0a24e7205a1b5e0c9fd6d86186fd82fa7d7\",\n        }\n\n# These global var are for meraki's network id and camenera serial number.\n# Network ID can be found via POSTMAN\nNETWORK_ID = \"N_711568741124565076\"\nCAMERA_SN = \"Q2EV-GW3A-9J8Z\"\n\n\ns3 = boto3.resource('s3', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ',\n    aws_secret_access_key='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')\n\n#########################\n# Look for the snapshot #\n#########################\n\ndef get_snap(headers, start):\n    camera_url = \"https://api.meraki.com/api/v0/networks/\" + NETWORK_ID + \"/cameras/\" + CAMERA_SN + \"/snapshot\"\n\n    payload = {\n\t    \"timestamp\": start\n    }\n\n    response = requests.request(\"POST\", camera_url, data=payload, headers=headers)\n\n    getJson = json.loads(str(response.text))\n\n    if 'errors' in getJson:\n        error_event(1)\n        return 0\n    else:    \n        #print(getJson)\n        url = getJson['url']\n\n        #print(\" \")\n        #print(\"This is the URL for the image: \")\n        #print(url)\n\n        time.sleep(5)\n        return url\n\n\n###################################\n# Gets the image and downloads it #\n###################################\n\ndef dl_jpg(url, file_path, file_name):\n    full_path = file_path + file_name\n    print(\" \")\n    print(full_path)\n    \n    with open(full_path, 'wb') as f:\n        resp = requests.get(url, verify=False, allow_redirects=True)\n        f.write(resp.content)\n    time.sleep(60)\n    f.close()\n    \n######################################\n# Gets the image and sends it to AWS #\n######################################\n\ndef aws_jpg(file_path, file_name):\n    full_path = file_path + file_name\n    data = open(full_path, 'rb')\n    s3.Bucket('transportasic').put_object(Key=file_name, Body=data)\n    return 0\n\n#####################\n#       TIME        #\n#####################\n\ndef time_update(start, x):\n    seconds = start.split(\":\")[2]\n    #fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str((int(seconds.split(\".\")[0])) + x) + \".\" + \"000Z\")\n    fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str(int(seconds.split(\"-\")[0]) - x) + \"-\" + str(seconds.split(\"-\")[1]))\n    return fim\n\n#####################\n#       ERRORS      \n#####################\n\ndef error_event(i):\n    switcher={\n        1:'Error #1: Bad TimeStamp',\n        2:'Error #2'\n    }\n    print (switcher.get(i,\"Invalid Error\"))\n    return 0\n\n\n\n#################\n# Funcao que retorna lista de objetos de um Bucket AWS S3\n# sera' usado para listar todas as imagens na pasta Fraude mais a diante\n#################\ndef list_bucket_objects(bucket_name):\n\n    # Acessa conteudo do bucket\n    #s_3 = boto3.client('s3')\n    try:\n        response = s3_client.list_objects_v2(Bucket=bucket_name)\n    except:\n        pass\n        return None\n\n    # Caso tenho conteudo na pasta, retorna lista de itens\n    if response['KeyCount'] > 0:\n        nova_lista=list()\n        for b in response['Contents']:\n            nova_lista.append (b['Key'])\n        return nova_lista\n    return None\n\n\n\n#################\n# Funcao que compara uma foto no S3 com outras fotos de outra pasta\n# Comparacao da foto tirada com arquivo de Fraude\n#################\n\ndef compare_faces(sourceFile):\n    #client=boto3.client('rekognition')\n    # gera uma lista de fotos no bucket Fraudes\n    \n    lista=(list_bucket_objects(my_bucket_fraud_str))\n\n    print (lista)\n\n    # looping de comparacão caso lista > 0 ou seja: ja' existe pelo menos 1 foto de fraudador para comparar\n    if len(lista)>0:\n        contador = 0\n        fotos = list()\n\n        for fraudador in lista:\n            print (fraudador)\n\n            try:\n                # try esta neste codigo pois caso nao exista foto na comparacao, gera erro   \n                response=client.compare_faces(SimilarityThreshold=80,\n                                            SourceImage={'S3Object':{'Bucket':'chkout','Name':sourceFile}},\n                                            TargetImage={'S3Object':{'Bucket':'fraudes','Name':fraudador}})\n\n\n                for faceMatch in response['FaceMatches']:\n                    position = faceMatch['Face']['BoundingBox']\n                    similarity = str(faceMatch['Similarity'])\n                    print('The face at ' +\n                        str(position['Left']) + ' ' +\n                        str(position['Top']) +\n                        ' matches with ' + similarity + '% confidence')\n\n                    contador=contador + 1\n                    fotos.append (str(fraudador))\n\n            except:\n                pass\n                # segue o laco\n\n        #return len(response['FaceMatches'])\n\n        # Devolve total de fontos de fraude encontradas e lista dos nomes das fotos\n        return (contador,fotos)          \n\n\n\n\n\n#####################\n#       MAIN        #\n#####################\n\nif __name__ == '__main__':\n    start = msg['payload']\n    url = get_snap(HEADERS, start)\n    if(url):\n        file_name = \"_snapshot_\" + start + \"UTC.jpg\"\n        dl_jpg(url, 'compare_images/', file_name)\n        aws_jpg('compare_images/', file_name)\n        msg['topic'] = url\n    else:\n        msg['payload'] = \"ERROR: URL is empty. \\n Please check if the recording is available or if the camera \" + CAMERA_SN + \" is online\"\n        msg['topic'] = url\n        return msg\n    msg['payload'] = str(file_name)\n    return msg","outputs":1,"x":1000,"y":1140,"wires":[["2ebdaf29.685d38","8e0ad35c.a17e5"]]},{"id":"a43af365.27d1c8","type":"debug","z":"c536364a.7dc428","name":"Debug: Timestamp MQTT","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":1000,"y":1040,"wires":[]},{"id":"1c32b2fd.dda5d5","type":"python-function","z":"c536364a.7dc428","name":"Time_Meraki","func":"# This block is reponsible for converting the timestamp coming from MQTT msgs to\n# the ISO format used by Meraki's dashboard\n\nimport datetime\n\nts = msg['payload']['ts']\n\nts = str(ts)[:-3]\n\nsnap = datetime.datetime.fromtimestamp(int(ts)).strftime('%Y-%m-%d %H:%M:%S')\nsnap_d = snap.split(\" \")[1]\nsnap_d = str(int(snap_d.split(\":\")[0]) - 3) + ':' + snap_d.split(\":\")[1]+ ':' + snap_d.split(\":\")[2] \nsnap = snap.split(\" \")[0] + \"T\" + snap_d + \"-03:00\"\n\nmsg['payload'] = str(snap)\n\nreturn msg","outputs":1,"x":730,"y":1040,"wires":[["a43af365.27d1c8","cceee906.aa575"]]},{"id":"2ebdaf29.685d38","type":"debug","z":"c536364a.7dc428","name":"Debug: Analytics","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":1250,"y":1140,"wires":[]},{"id":"d00e0f06.bfa4b","type":"python-function","z":"c536364a.7dc428","name":"FaceRecok","func":"import requests\nimport json\nimport time\nimport sys\nimport warnings\nimport boto3\nimport datetime\n\nclient = boto3.client('rekognition', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n\ndef main(name):\n    response = client.detect_faces(\n        Image={\n            'S3Object': {\n                'Bucket': 'transportasic',\n                'Name': name\n            }\n        },\n\n        Attributes=[\n            \"ALL\"\n            ]\n        )\n    return response\n\nif __name__ == '__main__':\n    if(msg['topic']):\n        name = msg['payload'] \n        resp = main(name)\n        if len(resp['FaceDetails']) >0:\n            msg['payload'] = name\n            return msg\n        else:\n            return [None, msg]","outputs":2,"x":1010,"y":1460,"wires":[["dd58e5e7.256f6","5bd89e9f.c1af78","68031ff6.098768"],["d9d0570b.5e79e"]]},{"id":"dd58e5e7.256f6","type":"debug","z":"c536364a.7dc428","name":"Debug: Face Recok URL","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":1290,"y":1380,"wires":[]},{"id":"8e0ad35c.a17e5","type":"delay","z":"c536364a.7dc428","name":"","pauseType":"delay","timeout":"20","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":760,"y":1280,"wires":[["d00e0f06.bfa4b"]]},{"id":"c289cbef.b88618","type":"link in","z":"264c0c13.69f254","name":"msg to webex teams via plain JSON","links":[],"x":675,"y":220,"wires":[["2415cc4.58387b4"]]},{"id":"1bfc9a1c.ef4c8e","type":"link in","z":"c536364a.7dc428","name":"Checkout","links":["a192f867.fd0ef8"],"x":235,"y":220,"wires":[["64321a54.640034","962a8ec4.1f97"]]},{"id":"18bcb6b.7e0fe49","type":"comment","z":"264c0c13.69f254","name":"Receive text + image and sends out to Webex Teams","info":"","x":240,"y":360,"wires":[]},{"id":"252acbc.5930bb4","type":"python-function","z":"264c0c13.69f254","name":"text + image","func":"import json\n\n# Put here where you bot will send messages\nroomId=\"Y2lzY29zcGFyazovL3VzL1JPT00vYzA5ZGVjYzAtMzNkNC0xMWVhLWEzNGItMmZkZDdkOTNkZWE3\"\n\n\n# get payload\n\nvariavel=msg['payload']\n\nsepara=variavel.split('@')\n\nimagem=\"\"\n\n\nif len(separa)==2 and separa[1]!=\"\":\n    mensagem=separa[0]\n    imagem=separa[1]\n    \n    body={\n            \"body\": {\n                \"roomId\": roomId,\n                \"text\": mensagem,\n                'files': imagem\n            }\n        }\n        \n    \nelif len(separa)==1:\n    mensagem=separa[0]\n\n    body={\n        \"body\": {\n            \"roomId\": roomId,\n            \"text\": mensagem\n        }\n    }\n        \n\nelif len(separa)==0:\n    mensagem=variavel\n\n    body={\n        \"body\": {\n            \"roomId\": roomId,\n            \"text\": mensagem\n        }\n    }\n        \n#msg['payload']={ 'msg': mensagem, 'imagem':imagem }\n\nmsg['payload']=body\n\n\nreturn msg","outputs":1,"x":570,"y":400,"wires":[["e781e7ea.95825","2415cc4.58387b4"]]},{"id":"e781e7ea.95825","type":"debug","z":"264c0c13.69f254","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":820,"y":400,"wires":[]},{"id":"33c69495.db2e24","type":"inject","z":"264c0c13.69f254","name":"","topic":"","payload":"Mensagem enviada com sucesso@https://spn5.meraki.com/stream/jpeg/snapshot/a2475df6b18be66cVHZWVhZTlhYzA0Yzg3NzAyNGU4NmVmOTEwYzc3ZWM1YjYxZmFiYmI0MWIwZjI3OTdkNTFmMzdmOWExY2EyNDM0ZaxBnUrue_yfiqaXWE0eSdNULCUX5JCwGsX1eu-DgXuk3Gnol-5EvW93sAP6hwi4icV7WuMRMK66qMvPPr4MzoipkpBcRw132fI4oAPJdN9-ndAMVJkvHFzRPkl_JHVzu5PDXYZbbyd391kixeWsI5boYetsVWl9aQbCT5lMkTRpcVsb2JHqah9egRLdPmEA8rZlgoB9t0GYndhfIR8nmxgCMVHh3W23eig9sBaIp_Su","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":330,"y":480,"wires":[["252acbc.5930bb4"]]},{"id":"6f0669b1.fc4aa","type":"link in","z":"264c0c13.69f254","name":"payload para Webex","links":["ca6faad8.5719c","eb337994.50f1d8","fd0cd819.9374a8","63477e28.c3d128","f75448c6.501c1","86e7ad99.c63fc","205bec3d.9ec2b4","a78a6669.786ad8","755de727.849a78"],"x":375,"y":400,"wires":[["252acbc.5930bb4"]]},{"id":"eb337994.50f1d8","type":"link out","z":"c536364a.7dc428","name":"payload para webex","links":["6f0669b1.fc4aa"],"x":915,"y":220,"wires":[]},{"id":"b9a2bd79.eece28","type":"switch","z":"264c0c13.69f254","name":"","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"","vt":"str"}],"checkall":"false","repair":false,"outputs":1,"x":1170,"y":580,"wires":[["8e2673b1.46bbe8","a192f867.fd0ef8"]]},{"id":"a192f867.fd0ef8","type":"link out","z":"264c0c13.69f254","name":"aciona Checkout","links":["1bfc9a1c.ef4c8e"],"x":1295,"y":580,"wires":[]},{"id":"64321a54.640034","type":"debug","z":"c536364a.7dc428","name":"Debug: Checkout 3rd Party input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":440,"y":120,"wires":[]},{"id":"321bacde.84f894","type":"debug","z":"c536364a.7dc428","name":"Debug: Timestamp","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":730,"y":140,"wires":[]},{"id":"962a8ec4.1f97","type":"python-function","z":"c536364a.7dc428","name":"Time_meraki","func":"# This block is reponsible for converting the timestamp coming from WBX msgs to\n# the ISO format used by Meraki's dashboard\n\nimport datetime\nimport json\n\nmsg['topic'] = str(msg['payload'])\n\nx=str(datetime.datetime.strptime(datetime.datetime.today().strftime(\"%Y-%m-%d %H:%M:%S\"),\"%Y-%m-%d %H:%M:%S\"))\nx=x+\"-03:00\"\n\nx = x.replace(\" \",\"T\")\n\nmsg['payload']= x\n\nreturn msg","outputs":1,"x":410,"y":220,"wires":[["321bacde.84f894","e79b1e40.c09f2"]]},{"id":"f9a992ef.5035","type":"link in","z":"c536364a.7dc428","name":"fraud","links":["b6675cde.4b96b"],"x":235,"y":440,"wires":[["b34de211.9efb38","a79e50c.cb8ebb"]]},{"id":"a79e50c.cb8ebb","type":"debug","z":"c536364a.7dc428","name":"Debug: Fraud 3rd Party input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":460,"y":400,"wires":[]},{"id":"fd0cd819.9374a8","type":"link out","z":"c536364a.7dc428","name":"payload para webex","links":["6f0669b1.fc4aa"],"x":575,"y":480,"wires":[]},{"id":"1c020338.a92485","type":"comment","z":"264c0c13.69f254","name":"4) Recreate Json","info":"","x":840,"y":760,"wires":[]},{"id":"a528342.0a28348","type":"debug","z":"264c0c13.69f254","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1350,"y":620,"wires":[]},{"id":"23504771.d02968","type":"comment","z":"264c0c13.69f254","name":"6A) Checkout","info":"","x":1110,"y":540,"wires":[]},{"id":"80dcbbd2.3ef288","type":"comment","z":"264c0c13.69f254","name":"6B) Fraud","info":"","x":1100,"y":620,"wires":[]},{"id":"762dc417.1fa2bc","type":"comment","z":"264c0c13.69f254","name":"6C) Help","info":"","x":1100,"y":720,"wires":[]},{"id":"ca6faad8.5719c","type":"link out","z":"264c0c13.69f254","name":"Default msg to Webex teams","links":["6f0669b1.fc4aa"],"x":1215,"y":760,"wires":[]},{"id":"ad03db43.01bd9","type":"switch","z":"264c0c13.69f254","name":"","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"","vt":"str"}],"checkall":"false","repair":false,"outputs":1,"x":1170,"y":660,"wires":[["a528342.0a28348","b6675cde.4b96b"]]},{"id":"b6675cde.4b96b","type":"link out","z":"264c0c13.69f254","name":"","links":["f9a992ef.5035"],"x":1295,"y":660,"wires":[]},{"id":"72dd888d.d9b5e8","type":"debug","z":"c536364a.7dc428","name":"Debug: MQTT raw detections","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":320,"y":840,"wires":[]},{"id":"9e19a564.0f2ff8","type":"inject","z":"c536364a.7dc428","name":"Sets API key on init.","topic":"","payload":"Setting Environment Variables","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"","x":220,"y":2260,"wires":[["53efb9ae.3ad25"]]},{"id":"e31f69f0.93737","type":"comment","z":"c536364a.7dc428","name":"API Key and Environment variables: UPDATE THE NODE!","info":"","x":270,"y":2220,"wires":[]},{"id":"53efb9ae.3ad25","type":"credentials","z":"c536364a.7dc428","name":"API KEY - UPDATE THIS","props":[{"value":"apikey","type":"flow"},{"value":"organizationId","type":"msg"},{"value":"networkId","type":"msg"}],"x":550,"y":2260,"wires":[[]]},{"id":"9ce94a53.e1b84","type":"inject","z":"c536364a.7dc428","name":"Test: Detected Face","topic":"","payload":"2020_snapshot_2020-01-20T13_00_39-03_00UTC.jpg","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":750,"y":1340,"wires":[["d00e0f06.bfa4b"]]},{"id":"d9afe008.a3a0d8","type":"inject","z":"c536364a.7dc428","name":"Test: No face detected","topic":"","payload":"_snapshot_2020-01-18T5:56:05-03:00UTC.jpg","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":740,"y":1400,"wires":[["d00e0f06.bfa4b"]]},{"id":"d9d0570b.5e79e","type":"python-function","z":"c536364a.7dc428","name":"Delete","func":"import boto3\n\ns3 = boto3.client('s3', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n\nkey = msg['payload']\n\nresponse = s3.delete_object(\n    Bucket='asics3',\n    Key=key,\n    )\n\nmsg['payload'] = 'imagem deletada' + '@' + msg['topic']\nreturn [msg]","outputs":1,"x":1450,"y":1460,"wires":[["248d16db.5d13ba","2e579c6d.873bb4"]]},{"id":"248d16db.5d13ba","type":"delay","z":"c536364a.7dc428","name":"","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1640,"y":1460,"wires":[[]]},{"id":"68031ff6.098768","type":"python-function","z":"c536364a.7dc428","name":"S3 e Rekognition","func":"import boto3\n\n# This function returns a list of objects from the AWS S3 Bucket\n# to list all images whitin the Fraud bucket\n\ndef list_bucket_objects(bucket_name):\n\n    # Access the specific bucket\n    s_3 = boto3.client('s3', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n    try:\n        response = s_3.list_objects_v2(Bucket=bucket_name)\n    except:\n        pass\n        return None\n\n    # Caso tenho conteudo na pasta, retorna lista de itens\n    if response['KeyCount'] > 0:\n        nova_lista=list()\n        \n        for b in response['Contents']:\n            nova_lista.append (b['Key'])\n        \n        return nova_lista\n\n    return None\n\n\n# This function compares a photos to the fraud bucket\n\ndef compare_faces(sourceFile):\n\n    client = boto3.client('rekognition', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n      \n    # it generates a list of photos archived in fraud bucket\n    lista=(list_bucket_objects('fraudasic'))\n\n    print (\"Lista de fraudes:\"+str(lista))\n\n    # Loop checking if there is more than 0 for comparison\n    if len(lista)>0:\n        contador = 0\n        fotos = list()\n\n        for fraudador in lista:\n            print (\"Analisando: \"+str(fraudador))\n\n            try:\n                # The use of try helps with error treatment  \n                # try esta neste codigo pois caso nao exista foto na comparacao, gera erro   \n                response=client.compare_faces(SimilarityThreshold=80,\n                                            SourceImage={'S3Object':{'Bucket':'transportasic','Name':sourceFile}},\n                                            TargetImage={'S3Object':{'Bucket':'fraudasic','Name':fraudador}})\n            \n                \n                for faceMatch in response['FaceMatches']:\n                    position = faceMatch['Face']['BoundingBox']\n                    similarity = str(faceMatch['Similarity'])\n                    \n                    # Prints for debug\n                    #print('The face at ' +\n                    #    str(position['Left']) + ' ' +\n                    #    str(position['Top']) +\n                    #    ' matches with ' + similarity + '% confidence')\n\n                    contador=contador + 1\n                    fotos.append (str(fraudador))\n\n            except:\n                pass\n\n        #return len(response['FaceMatches'])\n\n        # Returns the total of occurences (photos) and the list of the photos that match\n        return (contador,fotos)   \n    else:\n        contador = 0\n        fotos = list()\n        return (contador,fotos)   \n\ndef main():\n    \n    #Comparison file\n    #sourceFile='2020_snapshot_2020-01-20T13_00_39-03_00UTC.jpg'\n    sourceFile=msg['payload']\n    \n    # Calls the function\n    face_matches,fotos=compare_faces(sourceFile)\n\n    # Prints for debugging\n    #print(\"Resultados: \" + str(face_matches))\n    #print(\"Foto do fraudador:\" + str(fotos))\n\n    #saida='Foto comparada:'+str(sourceFile)\n    #saida=saida+\" Resultados encontrados: \" + str(face_matches)\n    #saida=saida+\" Foto do fraudador:\" + str(fotos)\n    \n    if face_matches > 0:\n        url = msg['topic']\n        msg['payload']= \"ALERT: A potential suspect has been detected in the store! \\n There is/are \" + str(face_matches) + \" matche(s).\" + \"@\" + url \n        return msg\n    else:\n        #msg['payload'] = \"Imagem comparada não foi relacionada com nenhum dos rostos dos possiveis fraudadores \" \n        #msg['payload'] = \"Correlation with previous frauds were not found.\" \n        return [None, msg]\nif __name__ == \"__main__\":\n    x = main ()\n    return x","outputs":2,"x":1270,"y":1260,"wires":[["4887899c.a9a05","f75448c6.501c1"],["d9d0570b.5e79e","ca153a4.89a0fc8"]]},{"id":"5bd89e9f.c1af78","type":"debug","z":"c536364a.7dc428","name":"Debug: Face Recok FileName","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1310,"y":1340,"wires":[]},{"id":"4887899c.a9a05","type":"debug","z":"c536364a.7dc428","name":"Debug: Fraud Recok","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1560,"y":1200,"wires":[]},{"id":"e39063a4.a30ad8","type":"inject","z":"c536364a.7dc428","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1020,"y":1260,"wires":[["68031ff6.098768"]]},{"id":"6ae0cc9.1ec8934","type":"python-function","z":"c536364a.7dc428","name":"S3 e Rekognition","func":"import boto3\n\n#################\n# Funcao que retorna lista de objetos de um Bucket AWS S3\n# sera' usado para listar todas as imagens na pasta Fraude mais a diante\n\ndef list_bucket_objects(bucket_name):\n\n    # Acessa conteudo do bucket\n    s_3 = boto3.client('s3', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n    try:\n        response = s_3.list_objects_v2(Bucket=bucket_name)\n    except:\n        pass\n        return None\n\n    # Caso tenho conteudo na pasta, retorna lista de itens\n    if response['KeyCount'] > 0:\n        nova_lista=list()\n        \n        for b in response['Contents']:\n            nova_lista.append (b['Key'])\n        \n        return nova_lista\n\n    return None\n\n\n\n#################\n# Funcao que compara uma foto no S3 com outras fotos de outra pasta\n#\n# Comparacao da foto tirada com arquivo de Fraude\n\n\ndef compare_faces(sourceFile):\n\n    client = boto3.client('rekognition', region_name='us-east-1', aws_access_key_id='AKIAQYTKF6BKV6SCNVPQ', aws_secret_access_key='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')\n      \n    # gera uma lista de fotos no bucket Fraudes\n    lista=(list_bucket_objects('fraudasic'))\n\n    print (\"Lista de fraudes:\"+str(lista))\n\n    # looping de comparacão caso lista > 0 ou seja: ja' existe pelo menos 1 foto de fraudador para comparar\n    if len(lista)>0:\n        contador = 0\n        fotos = list()\n\n        for fraudador in lista:\n            print (\"Analisando: \"+str(fraudador))\n\n            try:\n                # try esta neste codigo pois caso nao exista foto na comparacao, gera erro   \n                response=client.compare_faces(SimilarityThreshold=80,\n                                            SourceImage={'S3Object':{'Bucket':'asics3','Name':sourceFile}},\n                                            TargetImage={'S3Object':{'Bucket':'fraudasic','Name':fraudador}})\n            \n                \n                for faceMatch in response['FaceMatches']:\n                    position = faceMatch['Face']['BoundingBox']\n                    similarity = str(faceMatch['Similarity'])\n                    #print('The face at ' +\n                    #    str(position['Left']) + ' ' +\n                    #    str(position['Top']) +\n                    #    ' matches with ' + similarity + '% confidence')\n\n                    contador=contador + 1\n                    fotos.append (str(fraudador))\n\n            except:\n                pass\n                # segue o laco\n\n        #return len(response['FaceMatches'])\n\n        # Devolve total de fontos de fraude encontradas e lista dos nomes das fotos\n        return (contador,fotos)     \n    else:\n        contador = 0\n        fotos = list()\n        return (contador,fotos)     \n\n\ndef main():\n    \n    # Arquivo de comparacao\n    #sourceFile='2020_snapshot_2020-01-20T13_00_39-03_00UTC.jpg'\n    sourceFile=msg['topic']\n    \n    # Chama funcao\n    face_matches,fotos=compare_faces(sourceFile)\n\n    # imprime resultados da comparacao\n    #print(\"Resultados: \" + str(face_matches))\n    #print(\"Foto do fraudador:\" + str(fotos))\n\n    #saida='Foto comparada:'+str(sourceFile)\n    #saida=saida+\" Resultados encontrados: \" + str(face_matches)\n    #saida=saida+\" Foto do fraudador:\" + str(fotos)\n    if face_matches != 0:\n        msg['payload']= \"ATTENTION: A match was found in the fraud database! \\n There is/are \" + str(face_matches) + \" matche(s)\"\n    else:\n        msg['payload'] = \"No matches were found for this person!\" \n    return msg\n    \nif __name__ == \"__main__\":\n    main()\n    return msg\n\n","outputs":1,"x":990,"y":300,"wires":[["8fa68d07.a12b1","aa9e7f19.f7c05"]]},{"id":"755de727.849a78","type":"link out","z":"c536364a.7dc428","name":"payload para webex","links":["6f0669b1.fc4aa"],"x":1315,"y":300,"wires":[]},{"id":"8fa68d07.a12b1","type":"delay","z":"c536364a.7dc428","name":"","pauseType":"delay","timeout":"7","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1200,"y":300,"wires":[["755de727.849a78"]]},{"id":"aa9e7f19.f7c05","type":"debug","z":"c536364a.7dc428","name":"Debug: Recok msg","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1230,"y":240,"wires":[]},{"id":"1cf06eb6.6ef6d1","type":"debug","z":"c536364a.7dc428","name":"Debug: Snapshot msg","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":1040,"y":100,"wires":[]},{"id":"f75448c6.501c1","type":"link out","z":"c536364a.7dc428","name":"msg de erro na leitura de face","links":["6f0669b1.fc4aa"],"x":1455,"y":1140,"wires":[]},{"id":"ca153a4.89a0fc8","type":"debug","z":"c536364a.7dc428","name":"Debug: S3 File to be Deleted","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1590,"y":1300,"wires":[]},{"id":"2e579c6d.873bb4","type":"debug","z":"c536364a.7dc428","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1640,"y":1400,"wires":[]},{"id":"cceee906.aa575","type":"link out","z":"c536364a.7dc428","name":"","links":["ea7b9f02.98a098"],"x":755,"y":1140,"wires":[]},{"id":"200f6d89.064782","type":"link in","z":"c536364a.7dc428","name":"","links":["1ffd77d5.7fdd78"],"x":795,"y":1140,"wires":[["b8edfb9d.7f857"]]},{"id":"dee484a6.8d8fe","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":220,"wires":[["f2bc19de.3ac978"]]},{"id":"ea7b9f02.98a098","type":"link in","z":"97174c01.d6ed8","name":"Buffer IN","links":["cceee906.aa575"],"x":300,"y":140,"wires":[["dee484a6.8d8fe"]]},{"id":"f2bc19de.3ac978","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":280,"wires":[["6fe13975.7216f"]]},{"id":"6fe13975.7216f","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":340,"wires":[["725ff4be.34551c"]]},{"id":"725ff4be.34551c","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":400,"wires":[["2f954913.f62a16"]]},{"id":"473b96b3.77c41","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":280,"wires":[["7a657bbd.e16084"]]},{"id":"7a657bbd.e16084","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":340,"wires":[["8d831a48.71e68"]]},{"id":"8d831a48.71e68","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":400,"wires":[["1ffd77d5.7fdd78"]]},{"id":"2f954913.f62a16","type":"delay","z":"97174c01.d6ed8","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":220,"wires":[["473b96b3.77c41"]]},{"id":"1ffd77d5.7fdd78","type":"link out","z":"97174c01.d6ed8","name":"Buffer OUT","links":["200f6d89.064782"],"x":795,"y":140,"wires":[]},{"id":"74131948.ed85d8","type":"inject","z":"264c0c13.69f254","name":"Start","topic":"","payload":"{ }","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":170,"y":100,"wires":[["48a1fb8b.fd4624"]]},{"id":"dd73cbd9.39236","type":"comment","z":"264c0c13.69f254","name":"PUT your room ID here","info":"","x":560,"y":360,"wires":[]},{"id":"dd0f2452.024e08","type":"comment","z":"264c0c13.69f254","name":"THIS FLOW STARTS WHEN SOMEONE SENDS A MESSAGE TO OUR CHECKOUT BOT","info":"","x":330,"y":540,"wires":[]},{"id":"9d21b350.b8f45","type":"comment","z":"264c0c13.69f254","name":"THIS FLOW STARTS WHEN A MESSAGE SHOULD BE SENT FROM OUR BOT","info":"","x":300,"y":200,"wires":[]},{"id":"51879c7b.3b8b44","type":"comment","z":"c536364a.7dc428","name":"THIS FLOW STARTS WHEN OUR BOT GET A FRAUD COMMAND","info":"","x":320,"y":360,"wires":[]},{"id":"7e4a6c76.e69024","type":"comment","z":"c536364a.7dc428","name":"THIS FLOW STARTS WHEN OUR BOT GET A CHECKOUT COMMAND","info":"","x":340,"y":60,"wires":[]},{"id":"edf4cc39.75c28","type":"comment","z":"c536364a.7dc428","name":"THIS FLOW STARTS WHENEVER A MQTT MSG ARRIVES","info":"","x":260,"y":620,"wires":[]},{"id":"188572c6.fc6f85","type":"comment","z":"c536364a.7dc428","name":"THIS FLOW STARTS AS SOON AS A NEW PERSON IS GET ON MV CAMERA","info":"","x":320,"y":720,"wires":[]}]