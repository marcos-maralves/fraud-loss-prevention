[{"id":"83bfbaba.19a978","type":"tab","label":"Webex Teams","disabled":false,"info":""},{"id":"ce302cc0.a92bf","type":"tab","label":"Meraki Vision","disabled":false,"info":""},{"id":"35698cf2.970f64","type":"tab","label":"Buffer","disabled":false,"info":""},{"id":"b38550bb.51fe9","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"c33e73e6.b084e","type":"mqtt-broker","z":"","name":"Mosca-Snap","broker":"ec2-3-82-217-120.compute-1.amazonaws.com","port":"1889","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"fd9d391a.4ea718","type":"mqtt-broker","z":"","name":"Mosca-Snap","broker":"localhost","port":"1882","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"c8dc9a67.41b348","type":"meraki-dashboard-api-service","z":"","host":"https://api.meraki.com/api/v0","secureApiKeyHeaderOrQueryName":"X-Cisco-Meraki-API-Key","name":"COI Meraki Network"},{"id":"69e15f29.3e8d4","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"84c13c4c.7491c","type":"meraki-dashboard-api-service","z":"","host":"https://api.meraki.com/api/v0","secureApiKeyHeaderOrQueryName":"X-Cisco-Meraki-API-Key","name":""},{"id":"e6db5818.0fc028","type":"meraki-dashboard-api-service","z":"","host":"https://api.meraki.com/api/v0","secureApiKeyHeaderOrQueryName":"X-Cisco-Meraki-API-Key","name":"Maralves-Home"},{"id":"67e3800c.8bc74","type":"Webex Teams Authentication","z":"","name":"infobot"},{"id":"a8125652.ad8b38","type":"mqtt-broker","z":"","name":"Mosca-Snap","broker":"ec2-3-82-217-120.compute-1.amazonaws.com","port":"1889","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"d4670237.59007","type":"mqtt-broker","z":"","name":"Mosca-Snap","broker":"localhost","port":"1882","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"af5ec204.86b89","type":"comment","z":"83bfbaba.19a978","name":"Msg to Checkout-Compliance","info":"","x":160,"y":260,"wires":[]},{"id":"eed2df1.c54072","type":"Webex Teams API","z":"83bfbaba.19a978","profileConfig":"67e3800c.8bc74","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"messages","method":"createMessage","name":"Send MSG to Webex Room","x":880,"y":320,"wires":[[]]},{"id":"84e9cc4b.2ffcf","type":"inject","z":"83bfbaba.19a978","name":"Sample MSG test to webex teams","topic":"","payload":"{\"body\":{\"roomId\":\"Replace with your room Id\",\"text\":\"Replace with a message to your room\"}}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":480,"y":260,"wires":[["eed2df1.c54072"]]},{"id":"f9085ee6.20ec9","type":"Webex Teams API","z":"83bfbaba.19a978","profileConfig":"67e3800c.8bc74","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"rooms","method":"getRooms","name":"List rooms where bot belongs to","x":450,"y":100,"wires":[["682bb62c.2c08d8"]]},{"id":"682bb62c.2c08d8","type":"Webex Teams Payload Parser","z":"83bfbaba.19a978","name":"filters roomId and Title","parsers":[{"key":"id","as":""},{"key":"title","as":""}],"x":740,"y":100,"wires":[["10ea721.590018e"]]},{"id":"10ea721.590018e","type":"debug","z":"83bfbaba.19a978","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":970,"y":100,"wires":[]},{"id":"6394ca16.004a44","type":"comment","z":"83bfbaba.19a978","name":"THIS FLOW IS TO TEST YOUR BOT","info":"","x":160,"y":60,"wires":[]},{"id":"98d7b5f5.02fb68","type":"comment","z":"83bfbaba.19a978","name":"1) Get Webhook msg","info":"","x":120,"y":560,"wires":[]},{"id":"52bc6b54.ac15f4","type":"Webex Teams Payload Parser","z":"83bfbaba.19a978","name":"Filters MSG Id","parsers":[{"key":"id","as":"messageId"}],"x":300,"y":640,"wires":[["2e4917c9.170f78"]]},{"id":"2e4917c9.170f78","type":"Webex Teams API","z":"83bfbaba.19a978","profileConfig":"67e3800c.8bc74","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"messages","method":"getMessage","name":"get msg Id","x":150,"y":740,"wires":[["1ddf6a97.2fec25"]]},{"id":"99d25fca.b467e","type":"Webex Teams Payload Parser","z":"83bfbaba.19a978","name":"Filters text","parsers":[{"key":"text","as":""},{"key":"personId","as":""}],"x":570,"y":960,"wires":[["d1492ddb.07bbe"]]},{"id":"364ed304.7532fc","type":"Webex Teams Payload Parser","z":"83bfbaba.19a978","name":"Filters personId","parsers":[{"key":"personId","as":""},{"key":"name","as":""}],"x":180,"y":860,"wires":[["bc975e26.5a72f"]]},{"id":"bc975e26.5a72f","type":"Webex Teams API","z":"83bfbaba.19a978","profileConfig":"67e3800c.8bc74","apiUrl":"https://checkout-compliance-asic-q2fy20.us-south.cf.appdomain.cloud/api/cisco_spark_v1.json","resource":"people","method":"getPerson","name":"Person Id data","x":420,"y":1040,"wires":[["77037ffc.3e6bb"]]},{"id":"77037ffc.3e6bb","type":"Webex Teams Payload Parser","z":"83bfbaba.19a978","name":"Filters Display Name","parsers":[{"key":"displayName","as":""}],"x":720,"y":1040,"wires":[["d1492ddb.07bbe"]]},{"id":"21fadbd5.bb44d4","type":"debug","z":"83bfbaba.19a978","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload.body.text","targetType":"msg","x":1260,"y":800,"wires":[]},{"id":"1ddf6a97.2fec25","type":"switch","z":"83bfbaba.19a978","name":"filtering","property":"payload.personEmail","propertyType":"msg","rules":[{"t":"neq","v":"replace_with_your_bot_name@sparkbot.io","vt":"str"}],"checkall":"false","repair":false,"outputs":1,"x":380,"y":780,"wires":[["99d25fca.b467e","364ed304.7532fc"]]},{"id":"d1492ddb.07bbe","type":"join","z":"83bfbaba.19a978","name":"join","mode":"custom","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":910,"y":960,"wires":[["5229af3e.2cf26","b4851e30.42e5"]]},{"id":"5229af3e.2cf26","type":"debug","z":"83bfbaba.19a978","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1150,"y":960,"wires":[]},{"id":"f90beaf4.dd4778","type":"comment","z":"83bfbaba.19a978","name":"2) Move on if msg is not from bot itself","info":"","x":470,"y":700,"wires":[]},{"id":"37f7133a.720f9c","type":"comment","z":"83bfbaba.19a978","name":"2A) Who wrote?","info":"","x":180,"y":800,"wires":[]},{"id":"fb1b983.8a9cb68","type":"comment","z":"83bfbaba.19a978","name":"2B) What is written?","info":"","x":610,"y":900,"wires":[]},{"id":"accf4329.671c2","type":"comment","z":"83bfbaba.19a978","name":"3) Join who + what","info":"","x":870,"y":900,"wires":[]},{"id":"b4851e30.42e5","type":"change","z":"83bfbaba.19a978","name":"recreate JSON msg","rules":[{"t":"set","p":"payload.body.roomId","pt":"msg","to":"","tot":"str"},{"t":"move","p":"payload.text","pt":"msg","to":"payload.body.text","tot":"msg"},{"t":"delete","p":"payload.personId","pt":"msg"},{"t":"move","p":"payload.displayName","pt":"msg","to":"payload.body.displayName","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":800,"wires":[["21fadbd5.bb44d4","92aa6bae.732308"]]},{"id":"f12db1d2.de94","type":"comment","z":"83bfbaba.19a978","name":"5) Command interpretation","info":"","x":770,"y":600,"wires":[]},{"id":"92aa6bae.732308","type":"python-function","z":"83bfbaba.19a978","name":"Understand user's command","func":"import json\n\n\n# get payload\ntry:\n    texto = msg['payload']['body']['text']\nexcept:\n    pass    \n\n# default msg\ndefault=\"I didn't get your command. Use:\\n\"\ndefault=default+\"Checkout <ID> - start checkout and generate image.\\n\"\ndefault=default+\"Fraud <ID> - inform fraud transaction ID.\\n\"\n\n# lower input for easyness of comparison\ntexto=texto.lower()\n\n#split to parameters\nparams=texto.split(\" \")\nb=0\n\nif len(params) > 1:\n    \n    # check to see checkout word in command\n    if \"checkout\" in texto:\n        while b<len(params):\n            if params[b]=='checkout':\n                transacao=params[b+1]\n                msg['payload']=transacao\n                msg['topic']=transacao\n\n            b=b+1\n        \n        #return output to checkout function\n        return msg\n        \n    # check to see fraud word in command\n    elif \"fraud\" in texto:\n        while b<len(params):\n            if params[b]=='fraud':\n                transacao=params[b+1]\n                msg['payload']=transacao\n                msg['topic']=transacao\n            \n            b=b+1\n    \n        #outputs fraud to fraud function\n        return [None, msg]\n    \n    # if no match, default message    \n    else:\n        msg['payload']=default\n        return [None,None,msg]\n\nelse:\n    # if no match, default message\n    msg['payload']=default\n    return [None,None,msg]\n\n        \nreturn","outputs":3,"x":780,"y":660,"wires":[["21494e38.fa99d2"],["731c5be2.e94804"],["27503e7c.3f90b2"]]},{"id":"558f466c.bbcc98","type":"debug","z":"83bfbaba.19a978","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1350,"y":540,"wires":[]},{"id":"9f5abcb1.608b2","type":"Webex Teams Webhook","z":"83bfbaba.19a978","profileConfig":"67e3800c.8bc74","resource":"messages","event":"created","host":"http://YOUR_NODE_RED_IP_OR_FQDN:1880","name":"GET Webhook","x":100,"y":640,"wires":[["52bc6b54.ac15f4"]]},{"id":"768f7379.3f4a5c","type":"inject","z":"ce302cc0.a92bf","name":"Test: Msg from 3rd Party","topic":"3030","payload":"\"2020-01-16T14:50:00-03:00\"","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":370,"y":300,"wires":[["73d7f958.d66ae8"]]},{"id":"a97dc481.a781a8","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Snapshot file name","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1060,"y":120,"wires":[]},{"id":"73d7f958.d66ae8","type":"python-function","z":"ce302cc0.a92bf","name":"SecretSauce","func":"import requests\nimport json\nimport time\nimport sys\nimport warnings\nimport boto3\n\n# This is for ignoring some warnings in python\nwarnings.filterwarnings(\"ignore\")\n\n# This is Meraki API-KEY\nHEADERS = {\n        'X-Cisco-Meraki-API-Key': \"Replace with your Meraki API Key\",\n        }\n\n# These global var are for meraki's network id and camenera serial number.\n# Network ID can be found via POSTMAN\nNETWORK_ID = \"Replace with your Network Id\"\nCAMERA_SN = \"Replace with your Camera SN\"\n\n# This is the AWS S3 account.\n# It has its access enconded to the code as we did not want to use the AWS app\n# which requires an app installation. The app installation is more secure as\n# it is token based and here we are using a hard-coded method.\ns3 = boto3.resource('s3', aws_access_key_id='Replace with your AWS S3 Access Key',\n    aws_secret_access_key='Replace with your AWS S3 Secret Key')\n\n#########################\n# Look for the snapshot #\n#########################\n\n# This is the function for getting snapshots\n# It is possible that URL might be empty (no recording) so the consistence must\n# be treated in the main code.\ndef get_snap(headers, start):\n    camera_url = \"https://api.meraki.com/api/v0/networks/\" + NETWORK_ID + \"/cameras/\" + CAMERA_SN + \"/snapshot\"\n\n    payload = {\n\t#    \"timestamp\": start\n    }\n\n    response = requests.request(\"POST\", camera_url, data=payload, headers=headers)\n\n    getJson = json.loads(str(response.text))\n\n    if 'errors' in getJson:\n        error_event(2)\n        return 0\n    else:    \n        print(getJson)\n        url = getJson['url']\n\n        #print(\" \")\n        #print(\"This is the URL for the image: \")\n        #print(url)\n\n        time.sleep(5)\n        return url\n\n\n###################################\n# Gets the image and downloads it #\n###################################\n\n# This function receives 3 arguments and downloads the snapshot locally\n# There is a sleep time to make sure that the file has been downloaded \n# successifully.\ndef dl_jpg(url, file_path, file_name):\n    full_path = file_path + file_name\n    print(\" \")\n    print(full_path)\n    \n    with open(full_path, 'wb') as f:\n        resp = requests.get(url, verify=False, allow_redirects=True)\n        f.write(resp.content)\n    time.sleep(10)\n    f.close()\n    return 0\n    \n######################################\n# Gets the image and sends it to AWS #\n######################################\n\n# The JPG image is sent to AWS storage using the S3 Global Var info.\ndef aws_jpg(file_path, file_name):\n    full_path = file_path + file_name\n    data = open(full_path, 'rb')\n    s3.Bucket('asics3').put_object(Key=file_name, Body=data)\n    return 0\n\n#####################\n#       TIME        #\n#####################\n\n# Meraki uses an ISO version of timestamp. This must be treated before sending.\n# In here we do all the adjustmemnts required for this to work.\ndef time_update(start, x):\n    seconds = start.split(\":\")[2]\n    #fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str((int(seconds.split(\".\")[0])) + x) + \".\" + \"000Z\")\n    fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str(int(seconds.split(\"-\")[0]) + x) + \"-\" + str(seconds.split(\"-\")[1]))\n    return fim\n\n#####################\n#       ERRORS      #\n#####################\n\n# Errors are still a work in progress...\ndef error_event(i):\n    switcher={\n        1:'Error #1: Bad TimeStamp',\n        2:'Error #2'\n    }\n    print (switcher.get(i,\"Invalid Error\"))\n    return 0\n\n#####################\n#       MAIN        #\n#####################\n\nif __name__ == '__main__':\n    start = msg['payload']\n    transaction_id= msg['topic']\n    # Uncomment the line below if you are running outside node-red env.\n    # This is the format expected by Meraki's Dashboard:\n    #start = \"2019-12-16T11:50:00-03:00\"\n    #new_start = str(time_update(start,0))\n    \n    # This is still under testing, however we found that 2 snapshots might be \n    # enough for intial testing and comparison. This is not written in stone \n    # and it can be changed/adapted\n    for x in range (0,1):\n        new_start = time_update(start,x)\n        url = get_snap(HEADERS, new_start)\n        # Only not empty URLs:\n        if(url):\n            file_name = (transaction_id + \"_snapshot_\" + new_start + \"UTC.jpg\")\n            dl_jpg(url, '/home/ubuntu/images/', file_name)\n            aws_jpg('/home/ubuntu/images/', file_name)\n            # Portuguese (BR) Message Version:\n            #msg['payload'] = \"Checkout \" + transaction_id + \" realizado com sucesso\" + \"@\" + url\n            # English (US) Message Version:\n            msg['payload'] = \"Checkout \" + transaction_id + \" successfully recorded!\" + \"@\" + url\n            msg['topic'] = file_name\n        else:\n            print (\"Bye...\")\n            print transaction_id\n            msg['payload'] = \"ERROR: URL is empty. \\n Please check if the recording is available or if the camera \" + CAMERA_SN + \" is online\"\nreturn msg","outputs":1,"x":710,"y":220,"wires":[["a97dc481.a781a8","2e9872ef.d7305e","c0afd62d.4a2578","3d5b9fbe.59da4"]]},{"id":"79d05547.7a3b4c","type":"inject","z":"ce302cc0.a92bf","name":"","topic":"","payload":"\"2424\"","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":210,"y":560,"wires":[["deb19892.355258"]]},{"id":"ee6b87c8.e9f208","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Fraud msg output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":670,"y":520,"wires":[]},{"id":"deb19892.355258","type":"python-function","z":"ce302cc0.a92bf","name":"FraudFlag","func":"\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n# This is the AWS S3 account.\n# It has its access enconded to the code as we did not want to use the AWS app\n# which requires an app installation. The app installation is more secure as\n# it is token based and here we are using a had-coded method.\ns3_resource = boto3.resource('s3', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\ns3_client = boto3.client('s3', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n\n# Function for copying objects inside AWS S3\ndef copy_object(src_bucket_name, src_object_name,\n                dest_bucket_name, dest_object_name=None):\n\n    # Construct source bucket/object parameter\n    copy_source = {'Bucket': src_bucket_name, 'Key': src_object_name}\n    if dest_object_name is None:\n        dest_object_name = src_object_name\n\n    # Copy the object\n    #try:\n    s3_client.copy_object(CopySource=copy_source, Bucket=dest_bucket_name, Key=dest_object_name)\n    #except ClientError as e:\n    #    logging.error(e)\n    #    return False\n    #return True\n\n\ndef main():\n    # All S3 buckets are defined in here:\n    transaction_id = msg['payload']\n    my_bucket_fraud_str = 'fraudasic'\n    my_bucket_str = 'asics3'\n    my_bucket = s3_resource.Bucket(my_bucket_str)\n    my_bucket_fraud = s3_resource.Bucket(my_bucket_fraud_str)\n\n    frauds_list = []\n    \n    # All images are initially stored with transaction ID and its timestamp\n    # When a transaction is flaged, this script will look for the image that\n    # contains the corresponding transaction ID in its file name and it will\n    # copy from the trasaction bucket to the fraud bucket:\n    for images in my_bucket.objects.all():\n        if transaction_id+\"_snapshot_\" in images.key:\n            frauds_list.append(images.key)\n            print(images.key)\n            new_name = images.key\n\n    # Assign these values before running the program\n            src_bucket_name = my_bucket_str\n            src_object_name = new_name\n            dest_bucket_name = my_bucket_fraud_str\n            dest_object_name = new_name\n\n    # Set up logging\n            #logging.basicConfig(level=logging.DEBUG,\n            #            format='%(levelname)s: %(asctime)s: %(message)s')\n\n    # Copy the object\n            success = copy_object(src_bucket_name, src_object_name,\n                         dest_bucket_name, dest_object_name)\n            #if success:\n            #    logging.info(f'Copied {src_bucket_name}/{src_object_name} to '\n            #                 f'{dest_bucket_name}/{dest_object_name}')\n            #print (images.key + \"------Added to Fraud Bucket\")\n            all = str(images.key)\n            days = all.split(\"_\")[2]\n            day = days.split(\"T\")[0]\n            #Portuguese (BR) Message Version:\n            #msg['payload'] = \"Transação do dia \" + day + \" foi marcada como fraude\"\n            #English (US) Message Version:\n            msg['payload'] = \"Transaction \" + transaction_id + \" has been flagged as fraud successfully!\"\n\nif __name__ == '__main__':\n    main()\n    return msg\n","outputs":1,"x":400,"y":480,"wires":[["ee6b87c8.e9f208","a4817f25.3c3c4"]]},{"id":"ec542ffe.e79b3","type":"mqtt in","z":"ce302cc0.a92bf","name":"lab_entrance_(raw_detections)","topic":"/merakimv/Replace_with_your_camera_SN/raw_detections","qos":"0","datatype":"auto","broker":"a8125652.ad8b38","x":180,"y":780,"wires":[["f6e70bbd.81b2a8","6c1998f8.653388"]]},{"id":"f6e70bbd.81b2a8","type":"json","z":"ce302cc0.a92bf","name":"","property":"payload","action":"","pretty":true,"x":470,"y":780,"wires":[["757d7ae0.272a74","692ee358.e8ffac"]]},{"id":"757d7ae0.272a74","type":"debug","z":"ce302cc0.a92bf","name":"Debug: JSON Convertion","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":750,"y":780,"wires":[]},{"id":"b07aec68.113eb","type":"rbe","z":"ce302cc0.a92bf","name":"OID Check","func":"rbei","gap":"","start":"","inout":"out","property":"payload.objects[0].oid","x":670,"y":940,"wires":[["27a554ac.878d3c","cb04edbf.a5f99"]]},{"id":"692ee358.e8ffac","type":"switch","z":"ce302cc0.a92bf","name":"Person Type Check","property":"payload.objects[0].type","propertyType":"msg","rules":[{"t":"cont","v":"person","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":610,"y":860,"wires":[["b07aec68.113eb","1b5c1784.f58bf8"]]},{"id":"1b5c1784.f58bf8","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Person detection","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":890,"y":860,"wires":[]},{"id":"27a554ac.878d3c","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Duplicated Person ID ","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload.ts","targetType":"msg","x":940,"y":940,"wires":[]},{"id":"25e94c32.fa3984","type":"mosca in","z":"ce302cc0.a92bf","mqtt_port":"1889","mqtt_ws_port":"8089","name":"","username":"","password":"","dburl":"","x":150,"y":660,"wires":[["d563d5ae.8a3458"]]},{"id":"d563d5ae.8a3458","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Mosca MQTT Broker","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":430,"y":660,"wires":[]},{"id":"6e8cfd3c.9daca4","type":"python-function","z":"ce302cc0.a92bf","name":"Analytics","func":"import requests\nimport json\nimport time\nimport sys\nimport warnings\nimport boto3\nimport datetime\nimport os\n\n# This is the AWS S3 account.\n# It has its access enconded to the code as we did not want to use the AWS app\n# which requires an app installation. The app installation is more secure as\n# it is token based and here we are using a hard-coded method.\ns3_resource = boto3.resource('s3', region_name='Replace with your AWS region - example us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\ns3_client = boto3.client('s3', region_name='Replace with your AWS region - example us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n\nmy_bucket_fraud_str = 'fraudasic'\nmy_bucket_str = 'asics3'\n\nwarnings.filterwarnings(\"ignore\")\n\n# This is Meraki API-KEY\nHEADERS = {\n        'X-Cisco-Meraki-API-Key': \"Replace with your Meraki API Key\",\n        }\n\n# These global var are for meraki's network id and camenera serial number.\n# Network ID can be found via POSTMAN\nNETWORK_ID = \"Replace with your Network Id\"\nCAMERA_SN = \"Replace with your Camera SN\"\n\n\ns3 = boto3.resource('s3', aws_access_key_id='Replace with your AWS S3 Access Key',\n    aws_secret_access_key='Replace with your AWS S3 Secret Key')\n\n#########################\n# Look for the snapshot #\n#########################\n\ndef get_snap(headers, start):\n    camera_url = \"https://api.meraki.com/api/v0/networks/\" + NETWORK_ID + \"/cameras/\" + CAMERA_SN + \"/snapshot\"\n\n    payload = {\n\t    \"timestamp\": start\n    }\n\n    response = requests.request(\"POST\", camera_url, data=payload, headers=headers)\n\n    getJson = json.loads(str(response.text))\n\n    if 'errors' in getJson:\n        error_event(1)\n        return 0\n    else:    \n        #print(getJson)\n        url = getJson['url']\n\n        #print(\" \")\n        #print(\"This is the URL for the image: \")\n        #print(url)\n\n        time.sleep(5)\n        return url\n\n\n###################################\n# Gets the image and downloads it #\n###################################\n\ndef dl_jpg(url, file_path, file_name):\n    full_path = file_path + file_name\n    print(\" \")\n    print(full_path)\n    \n    with open(full_path, 'wb') as f:\n        resp = requests.get(url, verify=False, allow_redirects=True)\n        f.write(resp.content)\n    time.sleep(60)\n    f.close()\n    \n######################################\n# Gets the image and sends it to AWS #\n######################################\n\ndef aws_jpg(file_path, file_name):\n    full_path = file_path + file_name\n    data = open(full_path, 'rb')\n    s3.Bucket('transportasic').put_object(Key=file_name, Body=data)\n    return 0\n\n#####################\n#       TIME        #\n#####################\n\ndef time_update(start, x):\n    seconds = start.split(\":\")[2]\n    #fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str((int(seconds.split(\".\")[0])) + x) + \".\" + \"000Z\")\n    fim = (start.split(\":\")[0] + \":\" + start.split(\":\")[1] + \":\" + str(int(seconds.split(\"-\")[0]) - x) + \"-\" + str(seconds.split(\"-\")[1]))\n    return fim\n\n#####################\n#       ERRORS      \n#####################\n\ndef error_event(i):\n    switcher={\n        1:'Error #1: Bad TimeStamp',\n        2:'Error #2'\n    }\n    print (switcher.get(i,\"Invalid Error\"))\n    return 0\n\n\n\n#################\n# Funcao que retorna lista de objetos de um Bucket AWS S3\n# sera' usado para listar todas as imagens na pasta Fraude mais a diante\n#################\ndef list_bucket_objects(bucket_name):\n\n    # Acessa conteudo do bucket\n    #s_3 = boto3.client('s3')\n    try:\n        response = s3_client.list_objects_v2(Bucket=bucket_name)\n    except:\n        pass\n        return None\n\n    # Caso tenho conteudo na pasta, retorna lista de itens\n    if response['KeyCount'] > 0:\n        nova_lista=list()\n        for b in response['Contents']:\n            nova_lista.append (b['Key'])\n        return nova_lista\n    return None\n\n\n\n#################\n# Funcao que compara uma foto no S3 com outras fotos de outra pasta\n# Comparacao da foto tirada com arquivo de Fraude\n#################\n\ndef compare_faces(sourceFile):\n    #client=boto3.client('rekognition')\n    # gera uma lista de fotos no bucket Fraudes\n    \n    lista=(list_bucket_objects(my_bucket_fraud_str))\n\n    print (lista)\n\n    # looping de comparacão caso lista > 0 ou seja: ja' existe pelo menos 1 foto de fraudador para comparar\n    if len(lista)>0:\n        contador = 0\n        fotos = list()\n\n        for fraudador in lista:\n            print (fraudador)\n\n            try:\n                # try esta neste codigo pois caso nao exista foto na comparacao, gera erro   \n                response=client.compare_faces(SimilarityThreshold=80,\n                                            SourceImage={'S3Object':{'Bucket':'chkout','Name':sourceFile}},\n                                            TargetImage={'S3Object':{'Bucket':'fraudes','Name':fraudador}})\n\n\n                for faceMatch in response['FaceMatches']:\n                    position = faceMatch['Face']['BoundingBox']\n                    similarity = str(faceMatch['Similarity'])\n                    print('The face at ' +\n                        str(position['Left']) + ' ' +\n                        str(position['Top']) +\n                        ' matches with ' + similarity + '% confidence')\n\n                    contador=contador + 1\n                    fotos.append (str(fraudador))\n\n            except:\n                pass\n                # segue o laco\n\n        #return len(response['FaceMatches'])\n\n        # Devolve total de fontos de fraude encontradas e lista dos nomes das fotos\n        return (contador,fotos)          \n\n\n\n\n\n#####################\n#       MAIN        #\n#####################\n\nif __name__ == '__main__':\n    start = msg['payload']\n    url = get_snap(HEADERS, start)\n    if(url):\n        file_name = \"_snapshot_\" + start + \"UTC.jpg\"\n        dl_jpg(url, 'compare_images/', file_name)\n        aws_jpg('compare_images/', file_name)\n        msg['topic'] = url\n    else:\n        msg['payload'] = \"ERROR: URL is empty. \\n Please check if the recording is available or if the camera \" + CAMERA_SN + \" is online\"\n        msg['topic'] = url\n        return msg\n    msg['payload'] = str(file_name)\n    return msg","outputs":1,"x":1000,"y":1140,"wires":[["72fc0788.1eb218","23e17fea.53dd4"]]},{"id":"7a306584.43f18c","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Timestamp MQTT","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":1000,"y":1040,"wires":[]},{"id":"cb04edbf.a5f99","type":"python-function","z":"ce302cc0.a92bf","name":"Time_Meraki","func":"# This block is reponsible for converting the timestamp coming from MQTT msgs to\n# the ISO format used by Meraki's dashboard\n\nimport datetime\n\nts = msg['payload']['ts']\n\nts = str(ts)[:-3]\n\nsnap = datetime.datetime.fromtimestamp(int(ts)).strftime('%Y-%m-%d %H:%M:%S')\nsnap_d = snap.split(\" \")[1]\nsnap_d = str(int(snap_d.split(\":\")[0]) - 3) + ':' + snap_d.split(\":\")[1]+ ':' + snap_d.split(\":\")[2] \nsnap = snap.split(\" \")[0] + \"T\" + snap_d + \"-03:00\"\n\nmsg['payload'] = str(snap)\n\nreturn msg","outputs":1,"x":730,"y":1040,"wires":[["7a306584.43f18c","8b65b96d.dc4298"]]},{"id":"72fc0788.1eb218","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Analytics","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":1250,"y":1140,"wires":[]},{"id":"84dc687a.c4e0d8","type":"python-function","z":"ce302cc0.a92bf","name":"FaceRecok","func":"import requests\nimport json\nimport time\nimport sys\nimport warnings\nimport boto3\nimport datetime\n\nclient = boto3.client('rekognition', region_name='Replace with your AWS region - example us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n\ndef main(name):\n    response = client.detect_faces(\n        Image={\n            'S3Object': {\n                'Bucket': 'transportasic',\n                'Name': name\n            }\n        },\n\n        Attributes=[\n            \"ALL\"\n            ]\n        )\n    return response\n\nif __name__ == '__main__':\n    if(msg['topic']):\n        name = msg['payload'] \n        resp = main(name)\n        if len(resp['FaceDetails']) >0:\n            msg['payload'] = name\n            return msg\n        else:\n            return [None, msg]","outputs":2,"x":1010,"y":1460,"wires":[["5386a34b.f9e85c","74ee3d8c.1988b4","7354a133.963e4"],["28ade254.7c4b5e"]]},{"id":"5386a34b.f9e85c","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Face Recok URL","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":1290,"y":1380,"wires":[]},{"id":"23e17fea.53dd4","type":"delay","z":"ce302cc0.a92bf","name":"","pauseType":"delay","timeout":"20","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":760,"y":1280,"wires":[["84dc687a.c4e0d8"]]},{"id":"9745c5ce.acfcd8","type":"link in","z":"83bfbaba.19a978","name":"msg to webex teams via plain JSON","links":[],"x":675,"y":220,"wires":[["eed2df1.c54072"]]},{"id":"c90672fb.7c1ee","type":"link in","z":"ce302cc0.a92bf","name":"Checkout","links":["7283cafb.335fc4"],"x":235,"y":220,"wires":[["26a05aeb.af4f46","c9132a40.07ca88"]]},{"id":"4d7d2c27.2fead4","type":"comment","z":"83bfbaba.19a978","name":"Receive text + image and sends out to Webex Teams","info":"","x":240,"y":360,"wires":[]},{"id":"1754a327.482afd","type":"python-function","z":"83bfbaba.19a978","name":"text + image","func":"import json\n\n# Put here where you bot will send messages\nroomId=\"Replace with your Room Id\"\n\n\n# get payload\n\nvariavel=msg['payload']\n\nsepara=variavel.split('@')\n\nimagem=\"\"\n\n\nif len(separa)==2 and separa[1]!=\"\":\n    mensagem=separa[0]\n    imagem=separa[1]\n    \n    body={\n            \"body\": {\n                \"roomId\": roomId,\n                \"text\": mensagem,\n                'files': imagem\n            }\n        }\n        \n    \nelif len(separa)==1:\n    mensagem=separa[0]\n\n    body={\n        \"body\": {\n            \"roomId\": roomId,\n            \"text\": mensagem\n        }\n    }\n        \n\nelif len(separa)==0:\n    mensagem=variavel\n\n    body={\n        \"body\": {\n            \"roomId\": roomId,\n            \"text\": mensagem\n        }\n    }\n        \n#msg['payload']={ 'msg': mensagem, 'imagem':imagem }\n\nmsg['payload']=body\n\n\nreturn msg","outputs":1,"x":570,"y":400,"wires":[["aeba79e9.78fd78","eed2df1.c54072"]]},{"id":"aeba79e9.78fd78","type":"debug","z":"83bfbaba.19a978","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":820,"y":400,"wires":[]},{"id":"4ac669e7.071978","type":"inject","z":"83bfbaba.19a978","name":"","topic":"","payload":"Mensagem enviada com sucesso@https://spn5.meraki.com/stream/jpeg/snapshot/a2475df6b18be66cVHZWVhZTlhYzA0Yzg3NzAyNGU4NmVmOTEwYzc3ZWM1YjYxZmFiYmI0MWIwZjI3OTdkNTFmMzdmOWExY2EyNDM0ZaxBnUrue_yfiqaXWE0eSdNULCUX5JCwGsX1eu-DgXuk3Gnol-5EvW93sAP6hwi4icV7WuMRMK66qMvPPr4MzoipkpBcRw132fI4oAPJdN9-ndAMVJkvHFzRPkl_JHVzu5PDXYZbbyd391kixeWsI5boYetsVWl9aQbCT5lMkTRpcVsb2JHqah9egRLdPmEA8rZlgoB9t0GYndhfIR8nmxgCMVHh3W23eig9sBaIp_Su","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":330,"y":480,"wires":[["1754a327.482afd"]]},{"id":"13dcd3f0.2d86bc","type":"link in","z":"83bfbaba.19a978","name":"payload para Webex","links":["27503e7c.3f90b2","2e9872ef.d7305e","a4817f25.3c3c4","63477e28.c3d128","56f175f5.36846c","86e7ad99.c63fc","205bec3d.9ec2b4","a78a6669.786ad8","95b5d5f5.1ef8d8"],"x":375,"y":400,"wires":[["1754a327.482afd"]]},{"id":"2e9872ef.d7305e","type":"link out","z":"ce302cc0.a92bf","name":"payload para webex","links":["13dcd3f0.2d86bc"],"x":915,"y":220,"wires":[]},{"id":"21494e38.fa99d2","type":"switch","z":"83bfbaba.19a978","name":"","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"","vt":"str"}],"checkall":"false","repair":false,"outputs":1,"x":1170,"y":580,"wires":[["558f466c.bbcc98","7283cafb.335fc4"]]},{"id":"7283cafb.335fc4","type":"link out","z":"83bfbaba.19a978","name":"aciona Checkout","links":["c90672fb.7c1ee"],"x":1295,"y":580,"wires":[]},{"id":"26a05aeb.af4f46","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Checkout 3rd Party input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":440,"y":120,"wires":[]},{"id":"f05b7549.014308","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Timestamp","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":730,"y":140,"wires":[]},{"id":"c9132a40.07ca88","type":"python-function","z":"ce302cc0.a92bf","name":"Time_meraki","func":"# This block is reponsible for converting the timestamp coming from WBX msgs to\n# the ISO format used by Meraki's dashboard\n\nimport datetime\nimport json\n\nmsg['topic'] = str(msg['payload'])\n\nx=str(datetime.datetime.strptime(datetime.datetime.today().strftime(\"%Y-%m-%d %H:%M:%S\"),\"%Y-%m-%d %H:%M:%S\"))\nx=x+\"-03:00\"\n\nx = x.replace(\" \",\"T\")\n\nmsg['payload']= x\n\nreturn msg","outputs":1,"x":410,"y":220,"wires":[["f05b7549.014308","73d7f958.d66ae8"]]},{"id":"8cc23f6b.8836d","type":"link in","z":"ce302cc0.a92bf","name":"fraud","links":["64ed6e61.dd561"],"x":235,"y":440,"wires":[["deb19892.355258","ba330600.0a31b8"]]},{"id":"ba330600.0a31b8","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Fraud 3rd Party input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":460,"y":400,"wires":[]},{"id":"a4817f25.3c3c4","type":"link out","z":"ce302cc0.a92bf","name":"payload para webex","links":["13dcd3f0.2d86bc"],"x":575,"y":480,"wires":[]},{"id":"1dea9c07.93e8b4","type":"comment","z":"83bfbaba.19a978","name":"4) Recreate Json","info":"","x":840,"y":760,"wires":[]},{"id":"a2b7f67.7756608","type":"debug","z":"83bfbaba.19a978","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1350,"y":620,"wires":[]},{"id":"44aa0ea7.93223","type":"comment","z":"83bfbaba.19a978","name":"6A) Checkout","info":"","x":1110,"y":540,"wires":[]},{"id":"bf8155e2.408588","type":"comment","z":"83bfbaba.19a978","name":"6B) Fraud","info":"","x":1100,"y":620,"wires":[]},{"id":"a56216bc.ecfe68","type":"comment","z":"83bfbaba.19a978","name":"6C) Help","info":"","x":1100,"y":720,"wires":[]},{"id":"27503e7c.3f90b2","type":"link out","z":"83bfbaba.19a978","name":"Default msg to Webex teams","links":["13dcd3f0.2d86bc"],"x":1215,"y":760,"wires":[]},{"id":"731c5be2.e94804","type":"switch","z":"83bfbaba.19a978","name":"","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"","vt":"str"}],"checkall":"false","repair":false,"outputs":1,"x":1170,"y":660,"wires":[["a2b7f67.7756608","64ed6e61.dd561"]]},{"id":"64ed6e61.dd561","type":"link out","z":"83bfbaba.19a978","name":"","links":["8cc23f6b.8836d"],"x":1295,"y":660,"wires":[]},{"id":"6c1998f8.653388","type":"debug","z":"ce302cc0.a92bf","name":"Debug: MQTT raw detections","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":320,"y":840,"wires":[]},{"id":"aa043b46.378f28","type":"inject","z":"ce302cc0.a92bf","name":"Sets API key on init.","topic":"","payload":"Setting Environment Variables","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"","x":220,"y":2260,"wires":[["6ac9ef40.e2ae5"]]},{"id":"60eb0d4e.8cb0a4","type":"comment","z":"ce302cc0.a92bf","name":"API Key and Environment variables: UPDATE THE NODE!","info":"","x":270,"y":2220,"wires":[]},{"id":"4f02ea8a.f11824","type":"inject","z":"ce302cc0.a92bf","name":"Test: Detected Face","topic":"","payload":"2020_snapshot_2020-01-20T13_00_39-03_00UTC.jpg","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":750,"y":1340,"wires":[["84dc687a.c4e0d8"]]},{"id":"4e7d74d8.1e4a5c","type":"inject","z":"ce302cc0.a92bf","name":"Test: No face detected","topic":"","payload":"_snapshot_2020-01-18T5:56:05-03:00UTC.jpg","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":740,"y":1400,"wires":[["84dc687a.c4e0d8"]]},{"id":"28ade254.7c4b5e","type":"python-function","z":"ce302cc0.a92bf","name":"Delete","func":"import boto3\n\ns3 = boto3.client('s3', region_name='Replace with your AWS region - example us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n\nkey = msg['payload']\n\nresponse = s3.delete_object(\n    Bucket='asics3',\n    Key=key,\n    )\n\nmsg['payload'] = 'imagem deletada' + '@' + msg['topic']\nreturn [msg]","outputs":1,"x":1450,"y":1520,"wires":[["c27dff49.98375","f5af00d6.58e32"]]},{"id":"c27dff49.98375","type":"delay","z":"ce302cc0.a92bf","name":"","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1640,"y":1440,"wires":[[]]},{"id":"7354a133.963e4","type":"python-function","z":"ce302cc0.a92bf","name":"S3 e Rekognition","func":"import boto3\n\n# This function returns a list of objects from the AWS S3 Bucket\n# to list all images whitin the Fraud bucket\n\ndef list_bucket_objects(bucket_name):\n\n    # Access the specific bucket\n    s_3 = boto3.client('s3', region_name='Replace with your AWS region - example us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n    try:\n        response = s_3.list_objects_v2(Bucket=bucket_name)\n    except:\n        pass\n        return None\n\n    # Caso tenho conteudo na pasta, retorna lista de itens\n    if response['KeyCount'] > 0:\n        nova_lista=list()\n        \n        for b in response['Contents']:\n            nova_lista.append (b['Key'])\n        \n        return nova_lista\n\n    return None\n\n\n# This function compares a photos to the fraud bucket\n\ndef compare_faces(sourceFile):\n\n    client = boto3.client('rekognition', region_name='eplace with your AWS region - example us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n      \n    # it generates a list of photos archived in fraud bucket\n    lista=(list_bucket_objects('fraudasic'))\n\n    print (\"Lista de fraudes:\"+str(lista))\n\n    # Loop checking if there is more than 0 for comparison\n    if len(lista)>0:\n        contador = 0\n        fotos = list()\n\n        for fraudador in lista:\n            print (\"Analisando: \"+str(fraudador))\n\n            try:\n                # The use of try helps with error treatment  \n                # try esta neste codigo pois caso nao exista foto na comparacao, gera erro   \n                response=client.compare_faces(SimilarityThreshold=80,\n                                            SourceImage={'S3Object':{'Bucket':'transportasic','Name':sourceFile}},\n                                            TargetImage={'S3Object':{'Bucket':'fraudasic','Name':fraudador}})\n            \n                \n                for faceMatch in response['FaceMatches']:\n                    position = faceMatch['Face']['BoundingBox']\n                    similarity = str(faceMatch['Similarity'])\n                    \n                    # Prints for debug\n                    #print('The face at ' +\n                    #    str(position['Left']) + ' ' +\n                    #    str(position['Top']) +\n                    #    ' matches with ' + similarity + '% confidence')\n\n                    contador=contador + 1\n                    fotos.append (str(fraudador))\n\n            except:\n                pass\n\n        #return len(response['FaceMatches'])\n\n        # Returns the total of occurences (photos) and the list of the photos that match\n        return (contador,fotos)   \n    else:\n        contador = 0\n        fotos = list()\n        return (contador,fotos)   \n\ndef main():\n    \n    #Comparison file\n    #sourceFile='2020_snapshot_2020-01-20T13_00_39-03_00UTC.jpg'\n    sourceFile=msg['payload']\n    \n    # Calls the function\n    face_matches,fotos=compare_faces(sourceFile)\n\n    # Prints for debugging\n    #print(\"Resultados: \" + str(face_matches))\n    #print(\"Foto do fraudador:\" + str(fotos))\n\n    #saida='Foto comparada:'+str(sourceFile)\n    #saida=saida+\" Resultados encontrados: \" + str(face_matches)\n    #saida=saida+\" Foto do fraudador:\" + str(fotos)\n    \n    if face_matches > 0:\n        url = msg['topic']\n        msg['payload']= \"ALERT: A potential suspect has been detected in the store! \\n There is/are \" + str(face_matches) + \" matche(s).\" + \"@\" + url \n        return msg\n    else:\n        #msg['payload'] = \"Imagem comparada não foi relacionada com nenhum dos rostos dos possiveis fraudadores \" \n        #msg['payload'] = \"Correlation with previous frauds were not found.\" \n        return [None, msg]\nif __name__ == \"__main__\":\n    x = main ()\n    return x","outputs":2,"x":1270,"y":1260,"wires":[["796ab4fe.26ec4c","56f175f5.36846c"],["28ade254.7c4b5e","c8797347.dee02"]]},{"id":"74ee3d8c.1988b4","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Face Recok FileName","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1310,"y":1340,"wires":[]},{"id":"796ab4fe.26ec4c","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Fraud Recok","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1560,"y":1180,"wires":[]},{"id":"af406345.da997","type":"inject","z":"ce302cc0.a92bf","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1020,"y":1260,"wires":[["7354a133.963e4"]]},{"id":"c0afd62d.4a2578","type":"python-function","z":"ce302cc0.a92bf","name":"S3 e Rekognition","func":"import boto3\n\n#################\n# Funcao que retorna lista de objetos de um Bucket AWS S3\n# sera' usado para listar todas as imagens na pasta Fraude mais a diante\n\ndef list_bucket_objects(bucket_name):\n\n    # Acessa conteudo do bucket\n    s_3 = boto3.client('s3', region_name='Replace with your AWS region ie us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n    try:\n        response = s_3.list_objects_v2(Bucket=bucket_name)\n    except:\n        pass\n        return None\n\n    # Caso tenho conteudo na pasta, retorna lista de itens\n    if response['KeyCount'] > 0:\n        nova_lista=list()\n        \n        for b in response['Contents']:\n            nova_lista.append (b['Key'])\n        \n        return nova_lista\n\n    return None\n\n\n\n#################\n# Funcao que compara uma foto no S3 com outras fotos de outra pasta\n#\n# Comparacao da foto tirada com arquivo de Fraude\n\n\ndef compare_faces(sourceFile):\n\n    client = boto3.client('rekognition', region_name='Replace with your AWS region ie us-east-1', aws_access_key_id='Replace with your AWS S3 Access Key', aws_secret_access_key='Replace with your AWS S3 Secret Key')\n      \n    # gera uma lista de fotos no bucket Fraudes\n    lista=(list_bucket_objects('fraudasic'))\n\n    print (\"Lista de fraudes:\"+str(lista))\n\n    # looping de comparacão caso lista > 0 ou seja: ja' existe pelo menos 1 foto de fraudador para comparar\n    if len(lista)>0:\n        contador = 0\n        fotos = list()\n\n        for fraudador in lista:\n            print (\"Analisando: \"+str(fraudador))\n\n            try:\n                # try esta neste codigo pois caso nao exista foto na comparacao, gera erro   \n                response=client.compare_faces(SimilarityThreshold=80,\n                                            SourceImage={'S3Object':{'Bucket':'asics3','Name':sourceFile}},\n                                            TargetImage={'S3Object':{'Bucket':'fraudasic','Name':fraudador}})\n            \n                \n                for faceMatch in response['FaceMatches']:\n                    position = faceMatch['Face']['BoundingBox']\n                    similarity = str(faceMatch['Similarity'])\n                    #print('The face at ' +\n                    #    str(position['Left']) + ' ' +\n                    #    str(position['Top']) +\n                    #    ' matches with ' + similarity + '% confidence')\n\n                    contador=contador + 1\n                    fotos.append (str(fraudador))\n\n            except:\n                pass\n                # segue o laco\n\n        #return len(response['FaceMatches'])\n\n        # Devolve total de fontos de fraude encontradas e lista dos nomes das fotos\n        return (contador,fotos)     \n    else:\n        contador = 0\n        fotos = list()\n        return (contador,fotos)     \n\n\ndef main():\n    \n    # Arquivo de comparacao\n    #sourceFile='2020_snapshot_2020-01-20T13_00_39-03_00UTC.jpg'\n    sourceFile=msg['topic']\n    \n    # Chama funcao\n    face_matches,fotos=compare_faces(sourceFile)\n\n    # imprime resultados da comparacao\n    #print(\"Resultados: \" + str(face_matches))\n    #print(\"Foto do fraudador:\" + str(fotos))\n\n    #saida='Foto comparada:'+str(sourceFile)\n    #saida=saida+\" Resultados encontrados: \" + str(face_matches)\n    #saida=saida+\" Foto do fraudador:\" + str(fotos)\n    if face_matches != 0:\n        msg['payload']= \"ATTENTION: A match was found in the fraud database! \\n There is/are \" + str(face_matches) + \" matche(s)\"\n    else:\n        msg['payload'] = \"No matches were found for this person!\" \n    return msg\n    \nif __name__ == \"__main__\":\n    main()\n    return msg\n\n","outputs":1,"x":990,"y":300,"wires":[["727c724f.5a39fc","91ec06ec.b9b948"]]},{"id":"95b5d5f5.1ef8d8","type":"link out","z":"ce302cc0.a92bf","name":"payload para webex","links":["13dcd3f0.2d86bc"],"x":1315,"y":300,"wires":[]},{"id":"727c724f.5a39fc","type":"delay","z":"ce302cc0.a92bf","name":"","pauseType":"delay","timeout":"7","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1200,"y":300,"wires":[["95b5d5f5.1ef8d8"]]},{"id":"91ec06ec.b9b948","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Recok msg","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1230,"y":220,"wires":[]},{"id":"3d5b9fbe.59da4","type":"debug","z":"ce302cc0.a92bf","name":"Debug: Snapshot msg","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","x":1040,"y":60,"wires":[]},{"id":"56f175f5.36846c","type":"link out","z":"ce302cc0.a92bf","name":"msg de erro na leitura de face","links":["13dcd3f0.2d86bc"],"x":1455,"y":1140,"wires":[]},{"id":"c8797347.dee02","type":"debug","z":"ce302cc0.a92bf","name":"Debug: S3 File to be Deleted","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1590,"y":1300,"wires":[]},{"id":"f5af00d6.58e32","type":"debug","z":"ce302cc0.a92bf","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1650,"y":1380,"wires":[]},{"id":"8b65b96d.dc4298","type":"link out","z":"ce302cc0.a92bf","name":"","links":["2854c487.beb18c"],"x":755,"y":1140,"wires":[]},{"id":"9ce693c4.bb43e","type":"link in","z":"ce302cc0.a92bf","name":"","links":["fcb31115.4233b"],"x":795,"y":1140,"wires":[["6e8cfd3c.9daca4"]]},{"id":"f7c1e1c0.8dbf3","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":220,"wires":[["54573793.537bb8"]]},{"id":"2854c487.beb18c","type":"link in","z":"35698cf2.970f64","name":"Buffer IN","links":["8b65b96d.dc4298"],"x":300,"y":140,"wires":[["f7c1e1c0.8dbf3"]]},{"id":"54573793.537bb8","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":280,"wires":[["d0cd51dc.896d5"]]},{"id":"d0cd51dc.896d5","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":340,"wires":[["6d9a37d2.928d88"]]},{"id":"6d9a37d2.928d88","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":400,"wires":[["b580c1d1.18c3d"]]},{"id":"11e0df5a.5deee1","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":280,"wires":[["9e4b55c4.c4bb88"]]},{"id":"9e4b55c4.c4bb88","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":340,"wires":[["c3ac9898.4aff48"]]},{"id":"c3ac9898.4aff48","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":400,"wires":[["fcb31115.4233b"]]},{"id":"b580c1d1.18c3d","type":"delay","z":"35698cf2.970f64","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":220,"wires":[["11e0df5a.5deee1"]]},{"id":"fcb31115.4233b","type":"link out","z":"35698cf2.970f64","name":"Buffer OUT","links":["9ce693c4.bb43e"],"x":795,"y":140,"wires":[]},{"id":"99b2dfa1.68a4a","type":"inject","z":"83bfbaba.19a978","name":"Start","topic":"","payload":"{ }","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":170,"y":100,"wires":[["f9085ee6.20ec9"]]},{"id":"91c2bbe9.f4cd38","type":"comment","z":"83bfbaba.19a978","name":"INPUT 2: PUT your room ID here","info":"****","x":590,"y":360,"wires":[],"icon":"node-red/cog.svg"},{"id":"1887ce22.d6d512","type":"comment","z":"83bfbaba.19a978","name":"THIS FLOW STARTS WHEN SOMEONE SENDS A WEBEX MESSAGE TO OUR CHECKOUT BOT","info":"","x":350,"y":520,"wires":[]},{"id":"8020ba13.4af638","type":"comment","z":"83bfbaba.19a978","name":"THIS FLOW STARTS WHEN A MESSAGE SHOULD BE SENT FROM OUR BOT","info":"","x":300,"y":200,"wires":[]},{"id":"8a435a26.3e8168","type":"comment","z":"ce302cc0.a92bf","name":"THIS FLOW STARTS WHEN OUR BOT GET A FRAUD COMMAND","info":"","x":320,"y":360,"wires":[]},{"id":"3b8cee64.a28992","type":"comment","z":"ce302cc0.a92bf","name":"THIS FLOW STARTS WHEN OUR BOT GET A CHECKOUT COMMAND","info":"","x":340,"y":60,"wires":[]},{"id":"7167b381.df569c","type":"comment","z":"ce302cc0.a92bf","name":"THIS FLOW STARTS WHENEVER A MQTT MSG ARRIVES","info":"","x":260,"y":620,"wires":[]},{"id":"6eddb848.fea3c8","type":"comment","z":"ce302cc0.a92bf","name":"THIS FLOW STARTS AS SOON AS A NEW PERSON IS GET ON MV CAMERA","info":"","x":330,"y":700,"wires":[]},{"id":"9b58ef0a.2a7d1","type":"comment","z":"83bfbaba.19a978","name":"INPUT 1: ADD YOUR BOT ID AND TOKEN HERE","info":"","x":500,"y":60,"wires":[],"icon":"node-red/cog.svg"},{"id":"885f72fc.2c5f4","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 1: Meraki API Key, NetworkId, CameraSN, Aws access key, Aws secret access, ","info":"","x":940,"y":180,"wires":[],"icon":"node-red/cog.svg"},{"id":"4cf1dac0.9fabf4","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 2: Aws access key, Aws secret key, Aws S3 region","info":"","x":1110,"y":260,"wires":[]},{"id":"b67420e5.ff61a","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 3: Aws access key, Aws secret key, Aws S3 region","info":"","x":550,"y":440,"wires":[]},{"id":"ca5c2a61.e8fe78","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 5: Aws access key, Aws secret key, Aws S3 region, Source and Target Buckets, Meraki API Key, NetworkId, CameraSN","info":"","x":1360,"y":1100,"wires":[],"icon":"node-red/cog.svg"},{"id":"28c5efe.464851","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 6: Aws access key, Aws secret key, Aws S3 region","info":"","x":1390,"y":1220,"wires":[]},{"id":"528b6135.64582","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 7: Aws access key, Aws secret key, Aws S3 region","info":"","x":1150,"y":1420,"wires":[]},{"id":"b95557d2.eb2ab8","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 8: Aws access key, Aws secret key, Aws S3 region","info":"","x":1610,"y":1480,"wires":[]},{"id":"fd911c8.feccbe","type":"comment","z":"35698cf2.970f64","name":"Allow multiple image captures every 15 seconds","info":"Allow the code to accept new images during the wait time needed to download the image from Meraki Dashboard. A single 2min delay block will stop the code and won't accept new image snapshot requests","x":540,"y":160,"wires":[]},{"id":"6ac9ef40.e2ae5","type":"credentials","z":"ce302cc0.a92bf","name":"API KEY - UPDATE THIS","props":[{"value":"apikey","type":"flow"},{"value":"organizationId","type":"msg"},{"value":"networkId","type":"msg"}],"x":550,"y":2260,"wires":[[]]},{"id":"3dd11b97.d1d384","type":"comment","z":"83bfbaba.19a978","name":"INPUT 3: Add your Node-Red IP or FQDN","info":"****","x":180,"y":600,"wires":[],"icon":"node-red/cog.svg"},{"id":"33445b46.a90214","type":"comment","z":"83bfbaba.19a978","name":"INPUT 4: Add your bot name","info":"****","x":440,"y":740,"wires":[],"icon":"node-red/cog.svg"},{"id":"4cd0b2f.d6e514c","type":"comment","z":"ce302cc0.a92bf","name":"INPUT 4: Enter your camera SN","info":"","x":190,"y":740,"wires":[],"icon":"node-red/cog.svg"}]